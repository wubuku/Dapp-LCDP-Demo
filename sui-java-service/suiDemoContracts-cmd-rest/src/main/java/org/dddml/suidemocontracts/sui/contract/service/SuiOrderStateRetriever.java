// <autogenerated>
//   This file was generated by T4 code generator .
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suidemocontracts.sui.contract.service;

import com.github.wubuku.sui.bean.*;
import com.github.wubuku.sui.utils.*;
import org.dddml.suidemocontracts.domain.order.*;
import org.dddml.suidemocontracts.domain.*;
import org.dddml.suidemocontracts.sui.contract.DomainBeanUtils;
import org.dddml.suidemocontracts.sui.contract.Order;
import org.dddml.suidemocontracts.sui.contract.OrderItem;
import org.dddml.suidemocontracts.sui.contract.OrderItemDynamicField;

import java.util.*;
import java.math.*;
import java.util.function.*;

public class SuiOrderStateRetriever {

    private SuiJsonRpcClient suiJsonRpcClient;

    private Function<String, OrderState.MutableOrderState> orderStateFactory;
    private BiFunction<OrderState, String, OrderItemState.MutableOrderItemState> orderItemStateFactory;

    public SuiOrderStateRetriever(SuiJsonRpcClient suiJsonRpcClient,
                                  Function<String, OrderState.MutableOrderState> orderStateFactory,
                                  BiFunction<OrderState, String, OrderItemState.MutableOrderItemState> orderItemStateFactory
    ) {
        this.suiJsonRpcClient = suiJsonRpcClient;
        this.orderStateFactory = orderStateFactory;
        this.orderItemStateFactory = orderItemStateFactory;
    }

    public OrderState retrieveOrderState(String objectId) {
        GetMoveObjectDataResponse<Order> getObjectDataResponse = suiJsonRpcClient.getMoveObject(
                objectId, Order.class
        );

        Order order = getObjectDataResponse.getDetails().getData().getFields();
        return toOrderState(order);
    }

    private OrderState toOrderState(Order order) {
        OrderState.MutableOrderState orderState = orderStateFactory.apply(order.getId().getId());
        orderState.setVersion(order.getVersion());
        orderState.setTotalAmount(order.getTotalAmount());
        String orderItemTableId = order.getItems().getFields().getId().getId();
        List<OrderItem> items = getOrderItems(orderItemTableId);
        for (OrderItem i : items) {
            orderState.getItems().add(toOrderItemState(orderState, i));
        }

        return orderState;
    }

    private OrderItemState toOrderItemState(OrderState orderState, OrderItem orderItem) {
        OrderItemState.MutableOrderItemState orderItemState = orderItemStateFactory.apply(orderState, orderItem.getProductId());
        orderItemState.setQuantity(orderItem.getQuantity());
        orderItemState.setItemAmount(orderItem.getItemAmount());
        return orderItemState;
    }

    private List<OrderItem> getOrderItems(String orderItemTableId) {
        List<OrderItem> orderItems = new ArrayList<>();
        String cursor = null;
        while (true) {
            DynamicFieldPage orderItemFieldPage = suiJsonRpcClient.getDynamicFields(orderItemTableId, cursor, null);
            for (DynamicFieldInfo orderItemFieldInfo : orderItemFieldPage.getData()) {
            
                String fieldObjectId = orderItemFieldInfo.getObjectId();
                GetMoveObjectDataResponse<OrderItemDynamicField> getOrderItemFieldResponse
                        = suiJsonRpcClient.getMoveObject(fieldObjectId, OrderItemDynamicField.class);
                OrderItem orderItem = getOrderItemFieldResponse
                        .getDetails().getData().getFields().getValue().getFields();
                orderItems.add(orderItem);
            }
            cursor = orderItemFieldPage.getNextCursor();
            if (cursor == null) {
                break;
            }
        }
        return orderItems;
    }

    
}

