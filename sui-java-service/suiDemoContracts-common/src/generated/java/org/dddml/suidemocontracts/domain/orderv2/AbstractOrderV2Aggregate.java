// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suidemocontracts.domain.orderv2;

import java.util.*;
import java.math.BigInteger;
import org.dddml.suidemocontracts.domain.*;
import java.util.Date;
import org.dddml.suidemocontracts.specialization.*;

public abstract class AbstractOrderV2Aggregate extends AbstractAggregate implements OrderV2Aggregate {
    private OrderV2State.MutableOrderV2State state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractOrderV2Aggregate(OrderV2State state) {
        this.state = (OrderV2State.MutableOrderV2State)state;
    }

    public OrderV2State getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        OrderV2Command.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleOrderV2Aggregate extends AbstractOrderV2Aggregate {
        public SimpleOrderV2Aggregate(OrderV2State state) {
            super(state);
        }

        @Override
        public void create(String product, BigInteger quantity, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.Create c) {
            java.util.function.Supplier<OrderV2Event.OrderV2Created> eventFactory = () -> newOrderV2Created(product, quantity, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderV2Created e;
            try {
                e = verifyCreate(eventFactory, product, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void removeItem(String productId, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.RemoveItem c) {
            java.util.function.Supplier<OrderV2Event.OrderV2ItemRemoved> eventFactory = () -> newOrderV2ItemRemoved(productId, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderV2ItemRemoved e;
            try {
                e = verifyRemoveItem(eventFactory, productId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateItemQuantity(String productId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.UpdateItemQuantity c) {
            java.util.function.Supplier<OrderV2Event.OrderV2ItemQuantityUpdated> eventFactory = () -> newOrderV2ItemQuantityUpdated(productId, quantity, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderV2ItemQuantityUpdated e;
            try {
                e = verifyUpdateItemQuantity(eventFactory, productId, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateEstimatedShipDate(Day estimatedShipDate, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.UpdateEstimatedShipDate c) {
            java.util.function.Supplier<OrderV2Event.OrderV2EstimatedShipDateUpdated> eventFactory = () -> newOrderV2EstimatedShipDateUpdated(estimatedShipDate, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderV2EstimatedShipDateUpdated e;
            try {
                e = verifyUpdateEstimatedShipDate(eventFactory, estimatedShipDate, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void addOrderShipGroup(Integer shipGroupSeqId, String shipmentMethod, String productId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.AddOrderShipGroup c) {
            java.util.function.Supplier<OrderV2Event.OrderShipGroupAdded> eventFactory = () -> newOrderShipGroupAdded(shipGroupSeqId, shipmentMethod, productId, quantity, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderShipGroupAdded e;
            try {
                e = verifyAddOrderShipGroup(eventFactory, shipGroupSeqId, shipmentMethod, productId, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void cancelOrderShipGroupQuantity(Integer shipGroupSeqId, String productId, BigInteger cancelQuantity, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.CancelOrderShipGroupQuantity c) {
            java.util.function.Supplier<OrderV2Event.OrderShipGroupQuantityCanceled> eventFactory = () -> newOrderShipGroupQuantityCanceled(shipGroupSeqId, productId, cancelQuantity, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderShipGroupQuantityCanceled e;
            try {
                e = verifyCancelOrderShipGroupQuantity(eventFactory, shipGroupSeqId, productId, cancelQuantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void removeOrderShipGroupItem(Integer shipGroupSeqId, String productId, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.RemoveOrderShipGroupItem c) {
            java.util.function.Supplier<OrderV2Event.OrderShipGroupItemRemoved> eventFactory = () -> newOrderShipGroupItemRemoved(shipGroupSeqId, productId, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderShipGroupItemRemoved e;
            try {
                e = verifyRemoveOrderShipGroupItem(eventFactory, shipGroupSeqId, productId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void removeOrderShipGroup(Integer shipGroupSeqId, Long offChainVersion, String commandId, String requesterId, OrderV2Commands.RemoveOrderShipGroup c) {
            java.util.function.Supplier<OrderV2Event.OrderShipGroupRemoved> eventFactory = () -> newOrderShipGroupRemoved(shipGroupSeqId, offChainVersion, commandId, requesterId);
            OrderV2Event.OrderShipGroupRemoved e;
            try {
                e = verifyRemoveOrderShipGroup(eventFactory, shipGroupSeqId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected OrderV2Event.OrderV2Created verifyCreate(java.util.function.Supplier<OrderV2Event.OrderV2Created> eventFactory, String product, BigInteger quantity, OrderV2Commands.Create c) {
            String Product = product;
            BigInteger Quantity = quantity;

            OrderV2Event.OrderV2Created e = (OrderV2Event.OrderV2Created) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), product, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class CreateLogic {
//    public static OrderV2Event.OrderV2Created verify(java.util.function.Supplier<OrderV2Event.OrderV2Created> eventFactory, OrderV2State orderV2State, String product, BigInteger quantity, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderV2ItemRemoved verifyRemoveItem(java.util.function.Supplier<OrderV2Event.OrderV2ItemRemoved> eventFactory, String productId, OrderV2Commands.RemoveItem c) {
            String ProductId = productId;

            OrderV2Event.OrderV2ItemRemoved e = (OrderV2Event.OrderV2ItemRemoved) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveItemLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), productId, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class RemoveItemLogic {
//    public static OrderV2Event.OrderV2ItemRemoved verify(java.util.function.Supplier<OrderV2Event.OrderV2ItemRemoved> eventFactory, OrderV2State orderV2State, String productId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderV2ItemQuantityUpdated verifyUpdateItemQuantity(java.util.function.Supplier<OrderV2Event.OrderV2ItemQuantityUpdated> eventFactory, String productId, BigInteger quantity, OrderV2Commands.UpdateItemQuantity c) {
            String ProductId = productId;
            BigInteger Quantity = quantity;

            OrderV2Event.OrderV2ItemQuantityUpdated e = (OrderV2Event.OrderV2ItemQuantityUpdated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.UpdateItemQuantityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), productId, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class UpdateItemQuantityLogic {
//    public static OrderV2Event.OrderV2ItemQuantityUpdated verify(java.util.function.Supplier<OrderV2Event.OrderV2ItemQuantityUpdated> eventFactory, OrderV2State orderV2State, String productId, BigInteger quantity, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderV2EstimatedShipDateUpdated verifyUpdateEstimatedShipDate(java.util.function.Supplier<OrderV2Event.OrderV2EstimatedShipDateUpdated> eventFactory, Day estimatedShipDate, OrderV2Commands.UpdateEstimatedShipDate c) {
            Day EstimatedShipDate = estimatedShipDate;

            OrderV2Event.OrderV2EstimatedShipDateUpdated e = (OrderV2Event.OrderV2EstimatedShipDateUpdated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.UpdateEstimatedShipDateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Day.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), estimatedShipDate, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class UpdateEstimatedShipDateLogic {
//    public static OrderV2Event.OrderV2EstimatedShipDateUpdated verify(java.util.function.Supplier<OrderV2Event.OrderV2EstimatedShipDateUpdated> eventFactory, OrderV2State orderV2State, Day estimatedShipDate, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderShipGroupAdded verifyAddOrderShipGroup(java.util.function.Supplier<OrderV2Event.OrderShipGroupAdded> eventFactory, Integer shipGroupSeqId, String shipmentMethod, String productId, BigInteger quantity, OrderV2Commands.AddOrderShipGroup c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ShipmentMethod = shipmentMethod;
            String ProductId = productId;
            BigInteger Quantity = quantity;

            OrderV2Event.OrderShipGroupAdded e = (OrderV2Event.OrderShipGroupAdded) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.AddOrderShipGroupLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, String.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), shipGroupSeqId, shipmentMethod, productId, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class AddOrderShipGroupLogic {
//    public static OrderV2Event.OrderShipGroupAdded verify(java.util.function.Supplier<OrderV2Event.OrderShipGroupAdded> eventFactory, OrderV2State orderV2State, Integer shipGroupSeqId, String shipmentMethod, String productId, BigInteger quantity, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderShipGroupQuantityCanceled verifyCancelOrderShipGroupQuantity(java.util.function.Supplier<OrderV2Event.OrderShipGroupQuantityCanceled> eventFactory, Integer shipGroupSeqId, String productId, BigInteger cancelQuantity, OrderV2Commands.CancelOrderShipGroupQuantity c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ProductId = productId;
            BigInteger CancelQuantity = cancelQuantity;

            OrderV2Event.OrderShipGroupQuantityCanceled e = (OrderV2Event.OrderShipGroupQuantityCanceled) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.CancelOrderShipGroupQuantityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), shipGroupSeqId, productId, cancelQuantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class CancelOrderShipGroupQuantityLogic {
//    public static OrderV2Event.OrderShipGroupQuantityCanceled verify(java.util.function.Supplier<OrderV2Event.OrderShipGroupQuantityCanceled> eventFactory, OrderV2State orderV2State, Integer shipGroupSeqId, String productId, BigInteger cancelQuantity, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderShipGroupItemRemoved verifyRemoveOrderShipGroupItem(java.util.function.Supplier<OrderV2Event.OrderShipGroupItemRemoved> eventFactory, Integer shipGroupSeqId, String productId, OrderV2Commands.RemoveOrderShipGroupItem c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ProductId = productId;

            OrderV2Event.OrderShipGroupItemRemoved e = (OrderV2Event.OrderShipGroupItemRemoved) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveOrderShipGroupItemLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), shipGroupSeqId, productId, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class RemoveOrderShipGroupItemLogic {
//    public static OrderV2Event.OrderShipGroupItemRemoved verify(java.util.function.Supplier<OrderV2Event.OrderShipGroupItemRemoved> eventFactory, OrderV2State orderV2State, Integer shipGroupSeqId, String productId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected OrderV2Event.OrderShipGroupRemoved verifyRemoveOrderShipGroup(java.util.function.Supplier<OrderV2Event.OrderShipGroupRemoved> eventFactory, Integer shipGroupSeqId, OrderV2Commands.RemoveOrderShipGroup c) {
            Integer ShipGroupSeqId = shipGroupSeqId;

            OrderV2Event.OrderShipGroupRemoved e = (OrderV2Event.OrderShipGroupRemoved) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveOrderShipGroupLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), shipGroupSeqId, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.orderv2;
//
//public class RemoveOrderShipGroupLogic {
//    public static OrderV2Event.OrderShipGroupRemoved verify(java.util.function.Supplier<OrderV2Event.OrderShipGroupRemoved> eventFactory, OrderV2State orderV2State, Integer shipGroupSeqId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractOrderV2Event.OrderV2Created newOrderV2Created(String product, BigInteger quantity, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderV2Created e = new AbstractOrderV2Event.OrderV2Created();

            e.setProduct(product);
            e.setQuantity(quantity);
            e.setUnitPrice(null);
            e.setTotalAmount(null);
            e.setOwner(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderV2ItemRemoved newOrderV2ItemRemoved(String productId, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderV2ItemRemoved e = new AbstractOrderV2Event.OrderV2ItemRemoved();

            e.setProductId(productId);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderV2ItemQuantityUpdated newOrderV2ItemQuantityUpdated(String productId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderV2ItemQuantityUpdated e = new AbstractOrderV2Event.OrderV2ItemQuantityUpdated();

            e.setProductId(productId);
            e.setQuantity(quantity);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderV2EstimatedShipDateUpdated newOrderV2EstimatedShipDateUpdated(Day estimatedShipDate, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderV2EstimatedShipDateUpdated e = new AbstractOrderV2Event.OrderV2EstimatedShipDateUpdated();

            e.setEstimatedShipDate(estimatedShipDate);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderShipGroupAdded newOrderShipGroupAdded(Integer shipGroupSeqId, String shipmentMethod, String productId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderShipGroupAdded e = new AbstractOrderV2Event.OrderShipGroupAdded();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setShipmentMethod(shipmentMethod);
            e.setProductId(productId);
            e.setQuantity(quantity);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderShipGroupQuantityCanceled newOrderShipGroupQuantityCanceled(Integer shipGroupSeqId, String productId, BigInteger cancelQuantity, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderShipGroupQuantityCanceled e = new AbstractOrderV2Event.OrderShipGroupQuantityCanceled();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setProductId(productId);
            e.setCancelQuantity(cancelQuantity);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderShipGroupItemRemoved newOrderShipGroupItemRemoved(Integer shipGroupSeqId, String productId, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderShipGroupItemRemoved e = new AbstractOrderV2Event.OrderShipGroupItemRemoved();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setProductId(productId);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

        protected AbstractOrderV2Event.OrderShipGroupRemoved newOrderShipGroupRemoved(Integer shipGroupSeqId, Long offChainVersion, String commandId, String requesterId) {
            OrderV2EventId eventId = new OrderV2EventId(getState().getOrderId(), null);
            AbstractOrderV2Event.OrderShipGroupRemoved e = new AbstractOrderV2Event.OrderShipGroupRemoved();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderV2EventId(eventId);
            return e;
        }

    }

}

