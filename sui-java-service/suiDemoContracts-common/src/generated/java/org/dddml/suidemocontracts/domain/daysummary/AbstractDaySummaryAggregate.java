// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suidemocontracts.domain.daysummary;

import java.util.*;
import org.dddml.suidemocontracts.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suidemocontracts.specialization.*;

public abstract class AbstractDaySummaryAggregate extends AbstractAggregate implements DaySummaryAggregate {
    private DaySummaryState.MutableDaySummaryState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractDaySummaryAggregate(DaySummaryState state) {
        this.state = (DaySummaryState.MutableDaySummaryState)state;
    }

    public DaySummaryState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        DaySummaryCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleDaySummaryAggregate extends AbstractDaySummaryAggregate {
        public SimpleDaySummaryAggregate(DaySummaryState state) {
            super(state);
        }

        @Override
        public void create(String description, int[] metaData, String[] arrayData, int[] optionalData, Long offChainVersion, String commandId, String requesterId, DaySummaryCommands.Create c) {
            java.util.function.Supplier<DaySummaryEvent.DaySummaryCreated> eventFactory = () -> newDaySummaryCreated(description, metaData, arrayData, optionalData, offChainVersion, commandId, requesterId);
            DaySummaryEvent.DaySummaryCreated e;
            try {
                e = verifyCreate(eventFactory, description, metaData, arrayData, optionalData, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void delete(Long offChainVersion, String commandId, String requesterId, DaySummaryCommands.Delete c) {
            java.util.function.Supplier<DaySummaryEvent.DaySummaryDeleted> eventFactory = () -> newDaySummaryDeleted(offChainVersion, commandId, requesterId);
            DaySummaryEvent.DaySummaryDeleted e;
            try {
                e = verifyDelete(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected DaySummaryEvent.DaySummaryCreated verifyCreate(java.util.function.Supplier<DaySummaryEvent.DaySummaryCreated> eventFactory, String description, int[] metaData, String[] arrayData, int[] optionalData, DaySummaryCommands.Create c) {
            String Description = description;
            int[] MetaData = metaData;
            String[] ArrayData = arrayData;
            int[] OptionalData = optionalData;

            DaySummaryEvent.DaySummaryCreated e = (DaySummaryEvent.DaySummaryCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.daysummary.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, DaySummaryState.class, String.class, int[].class, String[].class, int[].class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), description, metaData, arrayData, optionalData, VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.daysummary;
//
//public class CreateLogic {
//    public static DaySummaryEvent.DaySummaryCreated verify(java.util.function.Supplier<DaySummaryEvent.DaySummaryCreated> eventFactory, DaySummaryState daySummaryState, String description, int[] metaData, String[] arrayData, int[] optionalData, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected DaySummaryEvent.DaySummaryDeleted verifyDelete(java.util.function.Supplier<DaySummaryEvent.DaySummaryDeleted> eventFactory, DaySummaryCommands.Delete c) {

            DaySummaryEvent.DaySummaryDeleted e = (DaySummaryEvent.DaySummaryDeleted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suidemocontracts.domain.daysummary.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, DaySummaryState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.dddml.suidemocontracts.domain.daysummary;
//
//public class DeleteLogic {
//    public static DaySummaryEvent.DaySummaryDeleted verify(java.util.function.Supplier<DaySummaryEvent.DaySummaryDeleted> eventFactory, DaySummaryState daySummaryState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractDaySummaryEvent.DaySummaryCreated newDaySummaryCreated(String description, int[] metaData, String[] arrayData, int[] optionalData, Long offChainVersion, String commandId, String requesterId) {
            DaySummaryEventId eventId = new DaySummaryEventId(getState().getDay(), null);
            AbstractDaySummaryEvent.DaySummaryCreated e = new AbstractDaySummaryEvent.DaySummaryCreated();

            e.setDescription(description);
            e.setMetaData(metaData);
            e.setArrayData(arrayData);
            e.setOptionalData(optionalData);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setDaySummaryEventId(eventId);
            return e;
        }

        protected AbstractDaySummaryEvent.DaySummaryDeleted newDaySummaryDeleted(Long offChainVersion, String commandId, String requesterId) {
            DaySummaryEventId eventId = new DaySummaryEventId(getState().getDay(), null);
            AbstractDaySummaryEvent.DaySummaryDeleted e = new AbstractDaySummaryEvent.DaySummaryDeleted();

            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setDaySummaryEventId(eventId);
            return e;
        }

    }

}

