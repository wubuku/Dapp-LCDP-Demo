// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suidemocontracts.domain;

import org.dddml.suidemocontracts.specialization.ReflectUtils;
import org.dddml.suidemocontracts.specialization.MutationContext;
import org.dddml.suidemocontracts.specialization.VerificationContext;
import org.dddml.suidemocontracts.domain.domainname.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suidemocontracts.domain.*;
import org.dddml.suidemocontracts.domain.order.*;
import org.dddml.suidemocontracts.domain.product.*;
import org.dddml.suidemocontracts.domain.player.*;
import org.dddml.suidemocontracts.domain.orderv2.*;
import org.dddml.suidemocontracts.domain.daysummary.*;

public class StaticMethodConstraints {

    public static void assertStaticVerificationAndMutationMethods() {

        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.domainname.RegisterLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, DomainNameState.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "registrationPeriod"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.domainname.RenewLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, DomainNameState.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "renewPeriod"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderState.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "product", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.RemoveItemLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderState.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "productId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.UpdateItemQuantityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderState.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "productId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.product.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProductState.class, String.class, BigInteger.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "name", "unitPrice", "owner"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.product.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProductState.class, String.class, BigInteger.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "name", "unitPrice", "owner"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.product.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProductState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.player.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "nickname", "intro"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.player.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "nickname", "intro"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.player.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "product", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveItemLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "productId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.UpdateItemQuantityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "productId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.UpdateEstimatedShipDateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Day.class, VerificationContext.class},
                    new String[]{"_", "_", "estimatedShipDate"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.AddOrderShipGroupLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, String.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "shipGroupSeqId", "shipmentMethod", "productId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.CancelOrderShipGroupQuantityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "_", "shipGroupSeqId", "productId", "cancelQuantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveOrderShipGroupItemLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "shipGroupSeqId", "productId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveOrderShipGroupLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, OrderV2State.class, Integer.class, VerificationContext.class},
                    new String[]{"_", "_", "shipGroupSeqId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.daysummary.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, DaySummaryState.class, String.class, int[].class, String[].class, int[].class, VerificationContext.class},
                    new String[]{"_", "_", "description", "metaData", "arrayData", "optionalData"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.daysummary.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, DaySummaryState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.domainname.RegisterLogic",
                    "mutate",
                    new Class[]{DomainNameState.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "registrationPeriod", "owner", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.domainname.RenewLogic",
                    "mutate",
                    new Class[]{DomainNameState.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "renewPeriod", "account", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.CreateLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "product", "quantity", "unitPrice", "totalAmount", "owner", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.RemoveItemLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "productId", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.UpdateItemQuantityLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "productId", "quantity", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.order.DeleteLogic",
                    "mutate",
                    new Class[]{OrderState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.product.CreateLogic",
                    "mutate",
                    new Class[]{ProductState.class, String.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "unitPrice", "owner", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.product.UpdateLogic",
                    "mutate",
                    new Class[]{ProductState.class, String.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "unitPrice", "owner", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.product.DeleteLogic",
                    "mutate",
                    new Class[]{ProductState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.player.CreateLogic",
                    "mutate",
                    new Class[]{PlayerState.class, String.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "nickname", "intro", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.player.UpdateLogic",
                    "mutate",
                    new Class[]{PlayerState.class, String.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "nickname", "intro", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.player.DeleteLogic",
                    "mutate",
                    new Class[]{PlayerState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.CreateLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "product", "quantity", "unitPrice", "totalAmount", "owner", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveItemLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "productId", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.UpdateItemQuantityLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, String.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "productId", "quantity", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.UpdateEstimatedShipDateLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, Day.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "estimatedShipDate", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.AddOrderShipGroupLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, Integer.class, String.class, String.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "shipmentMethod", "productId", "quantity", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.CancelOrderShipGroupQuantityLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, Integer.class, String.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "productId", "cancelQuantity", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveOrderShipGroupItemLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, Integer.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "productId", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.orderv2.RemoveOrderShipGroupLogic",
                    "mutate",
                    new Class[]{OrderV2State.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.daysummary.CreateLogic",
                    "mutate",
                    new Class[]{DaySummaryState.class, String.class, int[].class, String[].class, int[].class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "description", "metaData", "arrayData", "optionalData", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.suidemocontracts.domain.daysummary.DeleteLogic",
                    "mutate",
                    new Class[]{DaySummaryState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );



    }

}


