// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suidemocontracts.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suidemocontracts.domain.player.AbstractPlayerEvent;
import org.dddml.suidemocontracts.sui.contract.ContractConstants;
import org.dddml.suidemocontracts.sui.contract.DomainBeanUtils;
import org.dddml.suidemocontracts.sui.contract.SuiPackage;
import org.dddml.suidemocontracts.sui.contract.player.PlayerCreated;
import org.dddml.suidemocontracts.sui.contract.player.PlayerUpdated;
import org.dddml.suidemocontracts.sui.contract.player.PlayerDeleted;
import org.dddml.suidemocontracts.sui.contract.repository.PlayerEventRepository;
import org.dddml.suidemocontracts.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class PlayerEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("PlayerDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractPlayerEvent e) {
        if (isDeletionCommand(e.getEventType())) {
            return true;
        }
        return false;
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private PlayerEventRepository playerEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractPlayerEvent event) {
        event.setStatus("D");
        playerEventRepository.save(event);
    }

    @Transactional
    public void pullPlayerCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlayerCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlayerCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_PLAYER_CREATED,
                    cursor, limit, false, PlayerCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlayerCreated> eventEnvelope : eventPage.getData()) {
                    savePlayerCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlayerCreatedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstPlayerCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlayerCreated(SuiMoveEventEnvelope<PlayerCreated> eventEnvelope) {
        AbstractPlayerEvent.PlayerCreated playerCreated = DomainBeanUtils.toPlayerCreated(eventEnvelope);
        if (playerEventRepository.findById(playerCreated.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerCreated);
    }

    @Transactional
    public void pullPlayerUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlayerUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlayerUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_PLAYER_UPDATED,
                    cursor, limit, false, PlayerUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlayerUpdated> eventEnvelope : eventPage.getData()) {
                    savePlayerUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlayerUpdatedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstPlayerUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlayerUpdated(SuiMoveEventEnvelope<PlayerUpdated> eventEnvelope) {
        AbstractPlayerEvent.PlayerUpdated playerUpdated = DomainBeanUtils.toPlayerUpdated(eventEnvelope);
        if (playerEventRepository.findById(playerUpdated.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerUpdated);
    }

    @Transactional
    public void pullPlayerDeletedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlayerDeletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlayerDeleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_PLAYER_DELETED,
                    cursor, limit, false, PlayerDeleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlayerDeleted> eventEnvelope : eventPage.getData()) {
                    savePlayerDeleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlayerDeletedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstPlayerDeletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlayerDeleted(SuiMoveEventEnvelope<PlayerDeleted> eventEnvelope) {
        AbstractPlayerEvent.PlayerDeleted playerDeleted = DomainBeanUtils.toPlayerDeleted(eventEnvelope);
        if (playerEventRepository.findById(playerDeleted.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerDeleted);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
