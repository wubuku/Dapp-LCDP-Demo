// <autogenerated>
//   This file was generated by T4 code generator .
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suidemocontracts.restful.resource;

import java.util.*;
import java.util.stream.*;
import javax.servlet.http.*;
import javax.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import java.math.BigInteger;
import org.dddml.suidemocontracts.domain.*;
import java.util.Date;
import org.dddml.suidemocontracts.specialization.*;
import org.dddml.suidemocontracts.domain.orderv2.*;
import static org.dddml.suidemocontracts.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "OrderV2s", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class OrderV2Resource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());


    @Autowired
    private OrderV2ApplicationService orderV2ApplicationService;


    /**
     * Retrieve.
     * Retrieve OrderV2s
     */
    @GetMapping
    public OrderV2StateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<OrderV2State> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderV2ResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderV2Metadata.aliasMap.containsKey(n) ? OrderV2Metadata.aliasMap.get(n) : n));
            states = orderV2ApplicationService.get(
                c,
                OrderV2ResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            OrderV2StateDto.DtoConverter dtoConverter = new OrderV2StateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderV2StateDtoArray(states);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve in pages.
     * Retrieve OrderV2s in pages.
     */
    @GetMapping("_page")
    public Page<OrderV2StateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<OrderV2State> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderV2ResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderV2Metadata.aliasMap.containsKey(n) ? OrderV2Metadata.aliasMap.get(n) : n));
            states = orderV2ApplicationService.get(
                c,
                OrderV2ResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = orderV2ApplicationService.getCount(c);

            OrderV2StateDto.DtoConverter dtoConverter = new OrderV2StateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<OrderV2StateDto> statePage =  new Page.PageImpl<>(dtoConverter.toOrderV2StateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderV2 with the specified ID.
     */
    @GetMapping("{orderId}")
    public OrderV2StateDto get(@PathVariable("orderId") String orderId, @RequestParam(value = "fields", required = false) String fields) {
        try {
            String idObj = orderId;
            OrderV2State state = orderV2ApplicationService.get(idObj);
            if (state == null) { return null; }

            OrderV2StateDto.DtoConverter dtoConverter = new OrderV2StateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderV2StateDto(state);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_count")
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        try {
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (OrderV2Metadata.aliasMap.containsKey(n) ? OrderV2Metadata.aliasMap.get(n) : n));
            count = orderV2ApplicationService.getCount(c);
            return count;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/Create")
    public void create(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.Create content) {
        try {

            OrderV2Commands.Create cmd = content;//.toCreate();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/RemoveItem")
    public void removeItem(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.RemoveItem content) {
        try {

            OrderV2Commands.RemoveItem cmd = content;//.toRemoveItem();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/UpdateItemQuantity")
    public void updateItemQuantity(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.UpdateItemQuantity content) {
        try {

            OrderV2Commands.UpdateItemQuantity cmd = content;//.toUpdateItemQuantity();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/UpdateEstimatedShipDate")
    public void updateEstimatedShipDate(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.UpdateEstimatedShipDate content) {
        try {

            OrderV2Commands.UpdateEstimatedShipDate cmd = content;//.toUpdateEstimatedShipDate();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/AddOrderShipGroup")
    public void addOrderShipGroup(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.AddOrderShipGroup content) {
        try {

            OrderV2Commands.AddOrderShipGroup cmd = content;//.toAddOrderShipGroup();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/CancelOrderShipGroupQuantity")
    public void cancelOrderShipGroupQuantity(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.CancelOrderShipGroupQuantity content) {
        try {

            OrderV2Commands.CancelOrderShipGroupQuantity cmd = content;//.toCancelOrderShipGroupQuantity();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/RemoveOrderShipGroupItem")
    public void removeOrderShipGroupItem(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.RemoveOrderShipGroupItem content) {
        try {

            OrderV2Commands.RemoveOrderShipGroupItem cmd = content;//.toRemoveOrderShipGroupItem();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{orderId}/_commands/RemoveOrderShipGroup")
    public void removeOrderShipGroup(@PathVariable("orderId") String orderId, @RequestBody OrderV2Commands.RemoveOrderShipGroup content) {
        try {

            OrderV2Commands.RemoveOrderShipGroup cmd = content;//.toRemoveOrderShipGroup();
            String idObj = orderId;
            if (cmd.getOrderId() == null) {
                cmd.setOrderId(idObj);
            } else if (!cmd.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, cmd.getOrderId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderV2ApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        try {

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            OrderV2Metadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{orderId}/_events/{version}")
    public OrderV2Event getEvent(@PathVariable("orderId") String orderId, @PathVariable("version") long version) {
        try {

            String idObj = orderId;
            //OrderV2StateEventDtoConverter dtoConverter = getOrderV2StateEventDtoConverter();
            return orderV2ApplicationService.getEvent(idObj, version);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{orderId}/_historyStates/{version}")
    public OrderV2StateDto getHistoryState(@PathVariable("orderId") String orderId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        try {

            String idObj = orderId;
            OrderV2StateDto.DtoConverter dtoConverter = new OrderV2StateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderV2StateDto(orderV2ApplicationService.getHistoryState(idObj, version));

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderV2Item with the specified ProductId.
     */
    @GetMapping("{orderId}/OrderV2Items/{productId}")
    public OrderV2ItemStateDto getOrderV2Item(@PathVariable("orderId") String orderId, @PathVariable("productId") String productId) {
        try {

            OrderV2ItemState state = orderV2ApplicationService.getOrderV2Item(orderId, productId);
            if (state == null) { return null; }
            OrderV2ItemStateDto.DtoConverter dtoConverter = new OrderV2ItemStateDto.DtoConverter();
            OrderV2ItemStateDto stateDto = dtoConverter.toOrderV2ItemStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderV2Item List
     */
    @GetMapping("{orderId}/OrderV2Items")
    public OrderV2ItemStateDto[] getOrderV2Items(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderV2ResourceUtils.getOrderV2ItemFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderV2ItemMetadata.aliasMap.containsKey(n) ? OrderV2ItemMetadata.aliasMap.get(n) : n));
            Iterable<OrderV2ItemState> states = orderV2ApplicationService.getOrderV2Items(orderId, c,
                    OrderV2ResourceUtils.getOrderV2ItemQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderV2ItemStateDto.DtoConverter dtoConverter = new OrderV2ItemStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderV2ItemStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderShipGroup with the specified ShipGroupSeqId.
     */
    @GetMapping("{orderId}/OrderShipGroups/{shipGroupSeqId}")
    public OrderShipGroupStateDto getOrderShipGroup(@PathVariable("orderId") String orderId, @PathVariable("shipGroupSeqId") Integer shipGroupSeqId) {
        try {

            OrderShipGroupState state = orderV2ApplicationService.getOrderShipGroup(orderId, shipGroupSeqId);
            if (state == null) { return null; }
            OrderShipGroupStateDto.DtoConverter dtoConverter = new OrderShipGroupStateDto.DtoConverter();
            OrderShipGroupStateDto stateDto = dtoConverter.toOrderShipGroupStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderShipGroup List
     */
    @GetMapping("{orderId}/OrderShipGroups")
    public OrderShipGroupStateDto[] getOrderShipGroups(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderV2ResourceUtils.getOrderShipGroupFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderShipGroupMetadata.aliasMap.containsKey(n) ? OrderShipGroupMetadata.aliasMap.get(n) : n));
            Iterable<OrderShipGroupState> states = orderV2ApplicationService.getOrderShipGroups(orderId, c,
                    OrderV2ResourceUtils.getOrderShipGroupQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderShipGroupStateDto.DtoConverter dtoConverter = new OrderShipGroupStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderShipGroupStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderItemShipGroupAssociation with the specified ProductId.
     */
    @GetMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{productId}")
    public OrderItemShipGroupAssociationStateDto getOrderItemShipGroupAssociation(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") Integer orderShipGroupShipGroupSeqId, @PathVariable("productId") String productId) {
        try {

            OrderItemShipGroupAssociationState state = orderV2ApplicationService.getOrderItemShipGroupAssociation(orderId, orderShipGroupShipGroupSeqId, productId);
            if (state == null) { return null; }
            OrderItemShipGroupAssociationStateDto.DtoConverter dtoConverter = new OrderItemShipGroupAssociationStateDto.DtoConverter();
            OrderItemShipGroupAssociationStateDto stateDto = dtoConverter.toOrderItemShipGroupAssociationStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderItemShipGroupAssociation List
     */
    @GetMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations")
    public OrderItemShipGroupAssociationStateDto[] getOrderItemShipGroupAssociations(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") Integer orderShipGroupShipGroupSeqId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderV2ResourceUtils.getOrderItemShipGroupAssociationFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderItemShipGroupAssociationMetadata.aliasMap.containsKey(n) ? OrderItemShipGroupAssociationMetadata.aliasMap.get(n) : n));
            Iterable<OrderItemShipGroupAssociationState> states = orderV2ApplicationService.getOrderItemShipGroupAssociations(orderId, orderShipGroupShipGroupSeqId, c,
                    OrderV2ResourceUtils.getOrderItemShipGroupAssociationQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderItemShipGroupAssociationStateDto.DtoConverter dtoConverter = new OrderItemShipGroupAssociationStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderItemShipGroupAssociationStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderItemShipGroupAssocSubitem with the specified OrderItemShipGroupAssocSubitemDay.
     */
    @GetMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemShipGroupAssociationProductId}/OrderItemShipGroupAssocSubitems/{orderItemShipGroupAssocSubitemDay}")
    public OrderItemShipGroupAssocSubitemStateDto getOrderItemShipGroupAssocSubitem(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") Integer orderShipGroupShipGroupSeqId, @PathVariable("orderItemShipGroupAssociationProductId") String orderItemShipGroupAssociationProductId, @PathVariable("orderItemShipGroupAssocSubitemDay") String orderItemShipGroupAssocSubitemDay) {
        try {

            OrderItemShipGroupAssocSubitemState state = orderV2ApplicationService.getOrderItemShipGroupAssocSubitem(orderId, orderShipGroupShipGroupSeqId, orderItemShipGroupAssociationProductId, (new AbstractValueObjectTextFormatter<Day>(Day.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(orderItemShipGroupAssocSubitemDay)));
            if (state == null) { return null; }
            OrderItemShipGroupAssocSubitemStateDto.DtoConverter dtoConverter = new OrderItemShipGroupAssocSubitemStateDto.DtoConverter();
            OrderItemShipGroupAssocSubitemStateDto stateDto = dtoConverter.toOrderItemShipGroupAssocSubitemStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderItemShipGroupAssocSubitem List
     */
    @GetMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemShipGroupAssociationProductId}/OrderItemShipGroupAssocSubitems")
    public OrderItemShipGroupAssocSubitemStateDto[] getOrderItemShipGroupAssocSubitems(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") Integer orderShipGroupShipGroupSeqId, @PathVariable("orderItemShipGroupAssociationProductId") String orderItemShipGroupAssociationProductId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderV2ResourceUtils.getOrderItemShipGroupAssocSubitemFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderItemShipGroupAssocSubitemMetadata.aliasMap.containsKey(n) ? OrderItemShipGroupAssocSubitemMetadata.aliasMap.get(n) : n));
            Iterable<OrderItemShipGroupAssocSubitemState> states = orderV2ApplicationService.getOrderItemShipGroupAssocSubitems(orderId, orderShipGroupShipGroupSeqId, orderItemShipGroupAssociationProductId, c,
                    OrderV2ResourceUtils.getOrderItemShipGroupAssocSubitemQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderItemShipGroupAssocSubitemStateDto.DtoConverter dtoConverter = new OrderItemShipGroupAssocSubitemStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderItemShipGroupAssocSubitemStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }



    //protected  OrderV2StateEventDtoConverter getOrderV2StateEventDtoConverter() {
    //    return new OrderV2StateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderV2ResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderV2ItemPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderV2ResourceUtils.getOrderV2ItemFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderShipGroupPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderV2ResourceUtils.getOrderShipGroupFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderItemShipGroupAssociationPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderV2ResourceUtils.getOrderItemShipGroupAssociationFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderItemShipGroupAssocSubitemPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderV2ResourceUtils.getOrderItemShipGroupAssocSubitemFilterPropertyType(propertyName);
            }
        };
    }

    // ////////////////////////////////
 
    public static class OrderV2ResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String orderId, OrderV2Command value) {
            String idObj = orderId;
            if (value.getOrderId() == null) {
                value.setOrderId(idObj);
            } else if (!value.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, value.getOrderId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderV2Metadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderV2Metadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderV2Metadata.aliasMap.containsKey(fieldName)) {
                return OrderV2Metadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (OrderV2Metadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderV2Metadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderV2ItemQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderV2ItemMetadata.aliasMap);
        }

        public static List<String> getOrderV2ItemQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderV2ItemMetadata.aliasMap);
        }

        public static String getOrderV2ItemFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderV2ItemMetadata.aliasMap.containsKey(fieldName)) {
                return OrderV2ItemMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderV2ItemFilterPropertyType(String propertyName) {
            if (OrderV2ItemMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderV2ItemMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderV2ItemQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderV2ItemFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderV2ItemFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderShipGroupQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderShipGroupMetadata.aliasMap);
        }

        public static List<String> getOrderShipGroupQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderShipGroupMetadata.aliasMap);
        }

        public static String getOrderShipGroupFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderShipGroupMetadata.aliasMap.containsKey(fieldName)) {
                return OrderShipGroupMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderShipGroupFilterPropertyType(String propertyName) {
            if (OrderShipGroupMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderShipGroupMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderShipGroupQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderShipGroupFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderShipGroupFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderItemShipGroupAssociationQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderItemShipGroupAssociationMetadata.aliasMap);
        }

        public static List<String> getOrderItemShipGroupAssociationQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderItemShipGroupAssociationMetadata.aliasMap);
        }

        public static String getOrderItemShipGroupAssociationFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderItemShipGroupAssociationMetadata.aliasMap.containsKey(fieldName)) {
                return OrderItemShipGroupAssociationMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderItemShipGroupAssociationFilterPropertyType(String propertyName) {
            if (OrderItemShipGroupAssociationMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderItemShipGroupAssociationMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderItemShipGroupAssociationQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderItemShipGroupAssociationFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderItemShipGroupAssociationFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderItemShipGroupAssocSubitemQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderItemShipGroupAssocSubitemMetadata.aliasMap);
        }

        public static List<String> getOrderItemShipGroupAssocSubitemQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderItemShipGroupAssocSubitemMetadata.aliasMap);
        }

        public static String getOrderItemShipGroupAssocSubitemFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderItemShipGroupAssocSubitemMetadata.aliasMap.containsKey(fieldName)) {
                return OrderItemShipGroupAssocSubitemMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderItemShipGroupAssocSubitemFilterPropertyType(String propertyName) {
            if (OrderItemShipGroupAssocSubitemMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderItemShipGroupAssocSubitemMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderItemShipGroupAssocSubitemQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderItemShipGroupAssocSubitemFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderItemShipGroupAssocSubitemFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static OrderV2StateDto[] toOrderV2StateDtoArray(Iterable<String> ids) {
            List<OrderV2StateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                OrderV2StateDto dto = new OrderV2StateDto();
                dto.setOrderId(i);
                states.add(dto);
            });
            return states.toArray(new OrderV2StateDto[0]);
        }

    }

}

