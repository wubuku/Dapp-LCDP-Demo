// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain;

import org.dddml.roochdemocontracts.specialization.ReflectUtils;
import org.dddml.roochdemocontracts.specialization.MutationContext;
import org.dddml.roochdemocontracts.specialization.VerificationContext;
import org.dddml.roochdemocontracts.domain.article.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.roochdemocontracts.domain.*;
import org.dddml.roochdemocontracts.domain.tag.*;
import org.dddml.roochdemocontracts.domain.product.*;
import org.dddml.roochdemocontracts.domain.order.*;
import org.dddml.roochdemocontracts.domain.daysummary.*;

public class StaticMethodConstraints {

    public static void assertStaticVerificationAndMutationMethods() {

        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.CreateLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, String.class, ReferenceVO[].class, String[].class, VerificationContext.class},
                    new String[]{"_", "title", "author", "content", "references", "tags"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.AddReferenceLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "referenceNumber", "title", "url"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.UpdateReferenceLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "referenceNumber", "title", "url", "author"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.RemoveReferenceLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "referenceNumber"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.tag.CreateLogic",
                    "verify",
                    new Class[]{TagState.class, VerificationContext.class},
                    new String[]{"_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.product.CreateLogic",
                    "verify",
                    new Class[]{ProductState.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "name", "unitPrice"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.CreateLogic",
                    "verify",
                    new Class[]{OrderState.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "productObjId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.RemoveItemLogic",
                    "verify",
                    new Class[]{OrderState.class, String.class, VerificationContext.class},
                    new String[]{"_", "productObjId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.UpdateItemQuantityLogic",
                    "verify",
                    new Class[]{OrderState.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "productObjId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.UpdateEstimatedShipDateLogic",
                    "verify",
                    new Class[]{OrderState.class, Day.class, VerificationContext.class},
                    new String[]{"_", "estimatedShipDate"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.AddOrderShipGroupLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "shipGroupSeqId", "shipmentMethod", "productObjId", "quantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.CancelOrderShipGroupQuantityLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "shipGroupSeqId", "productObjId", "cancelQuantity"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.RemoveOrderShipGroupItemLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, VerificationContext.class},
                    new String[]{"_", "shipGroupSeqId", "productObjId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.daysummary.CreateLogic",
                    "verify",
                    new Class[]{DaySummaryState.class, String.class, int[].class, String[].class, String.class, Integer[].class, Long[].class, BigInteger[].class, BigInteger[].class, BigInteger[].class, VerificationContext.class},
                    new String[]{"_", "description", "metaData", "arrayData", "optionalData", "u16ArrayData", "u32ArrayData", "u64ArrayData", "u128ArrayData", "u256ArrayData"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.CreateLogic",
                    "mutate",
                    new Class[]{ArticleState.class, String.class, String.class, String.class, ReferenceVO[].class, String[].class, String.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "title", "author", "content", "references", "tags", "owner", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.AddReferenceLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "referenceNumber", "title", "url", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.UpdateReferenceLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "referenceNumber", "title", "url", "author", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.article.RemoveReferenceLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "referenceNumber", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.tag.CreateLogic",
                    "mutate",
                    new Class[]{TagState.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.product.CreateLogic",
                    "mutate",
                    new Class[]{ProductState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "unitPrice", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.CreateLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "productObjId", "quantity", "unitPrice", "totalAmount", "owner", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.RemoveItemLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "productObjId", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.UpdateItemQuantityLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "productObjId", "quantity", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.UpdateEstimatedShipDateLogic",
                    "mutate",
                    new Class[]{OrderState.class, Day.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "estimatedShipDate", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.AddOrderShipGroupLogic",
                    "mutate",
                    new Class[]{OrderState.class, Integer.class, String.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "shipmentMethod", "productObjId", "quantity", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.CancelOrderShipGroupQuantityLogic",
                    "mutate",
                    new Class[]{OrderState.class, Integer.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "productObjId", "cancelQuantity", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.order.RemoveOrderShipGroupItemLogic",
                    "mutate",
                    new Class[]{OrderState.class, Integer.class, String.class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "shipGroupSeqId", "productObjId", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddml.roochdemocontracts.domain.daysummary.CreateLogic",
                    "mutate",
                    new Class[]{DaySummaryState.class, String.class, int[].class, String[].class, String.class, Integer[].class, Long[].class, BigInteger[].class, BigInteger[].class, BigInteger[].class, BigInteger.class, BigInteger.class, String.class, RoochEventGuid.class, String.class, MutationContext.class},
                    new String[]{"_", "description", "metaData", "arrayData", "optionalData", "u16ArrayData", "u32ArrayData", "u64ArrayData", "u128ArrayData", "u256ArrayData", "roochEventVersion", "roochEventSequenceNumber", "roochEventType", "roochEventGuid", "status"}
            );



    }

}


