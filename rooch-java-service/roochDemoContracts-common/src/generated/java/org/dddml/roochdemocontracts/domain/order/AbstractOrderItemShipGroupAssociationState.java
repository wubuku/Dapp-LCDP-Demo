// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.order;

import java.util.*;
import java.math.*;
import java.util.Date;
import org.dddml.roochdemocontracts.domain.*;
import org.dddml.roochdemocontracts.specialization.*;
import org.dddml.roochdemocontracts.domain.order.OrderItemShipGroupAssociationEvent.*;

public abstract class AbstractOrderItemShipGroupAssociationState implements OrderItemShipGroupAssociationState.SqlOrderItemShipGroupAssociationState, Saveable {

    private OrderItemShipGroupAssociationId orderItemShipGroupAssociationId = new OrderItemShipGroupAssociationId();

    public OrderItemShipGroupAssociationId getOrderItemShipGroupAssociationId() {
        return this.orderItemShipGroupAssociationId;
    }

    public void setOrderItemShipGroupAssociationId(OrderItemShipGroupAssociationId orderItemShipGroupAssociationId) {
        this.orderItemShipGroupAssociationId = orderItemShipGroupAssociationId;
    }

    private transient OrderState orderState;

    public OrderState getOrderState() {
        return orderState;
    }

    public void setOrderState(OrderState s) {
        orderState = s;
    }
    
    private OrderShipGroupState protectedOrderShipGroupState;

    protected OrderShipGroupState getProtectedOrderShipGroupState() {
        return protectedOrderShipGroupState;
    }

    protected void setProtectedOrderShipGroupState(OrderShipGroupState protectedOrderShipGroupState) {
        this.protectedOrderShipGroupState = protectedOrderShipGroupState;
    }

    public String getOrderId() {
        return this.getOrderItemShipGroupAssociationId().getOrderId();
    }
        
    public void setOrderId(String orderId) {
        this.getOrderItemShipGroupAssociationId().setOrderId(orderId);
    }

    public Integer getOrderShipGroupShipGroupSeqId() {
        return this.getOrderItemShipGroupAssociationId().getOrderShipGroupShipGroupSeqId();
    }
        
    public void setOrderShipGroupShipGroupSeqId(Integer orderShipGroupShipGroupSeqId) {
        this.getOrderItemShipGroupAssociationId().setOrderShipGroupShipGroupSeqId(orderShipGroupShipGroupSeqId);
    }

    public String getProductObjId() {
        return this.getOrderItemShipGroupAssociationId().getProductObjId();
    }
        
    public void setProductObjId(String productObjId) {
        this.getOrderItemShipGroupAssociationId().setProductObjId(productObjId);
    }

    private BigInteger quantity;

    public BigInteger getQuantity() {
        return this.quantity;
    }

    public void setQuantity(BigInteger quantity) {
        this.quantity = quantity;
    }

    private BigInteger cancelQuantity;

    public BigInteger getCancelQuantity() {
        return this.cancelQuantity;
    }

    public void setCancelQuantity(BigInteger cancelQuantity) {
        this.cancelQuantity = cancelQuantity;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<OrderItemShipGroupAssocSubitemState> protectedSubitems = new HashSet<>();

    protected Set<OrderItemShipGroupAssocSubitemState> getProtectedSubitems() {
        return this.protectedSubitems;
    }

    protected void setProtectedSubitems(Set<OrderItemShipGroupAssocSubitemState> protectedSubitems) {
        this.protectedSubitems = protectedSubitems;
    }

    private EntityStateCollection<Day, OrderItemShipGroupAssocSubitemState> subitems;

    public EntityStateCollection<Day, OrderItemShipGroupAssocSubitemState> getSubitems() {
        return this.subitems;
    }

    public void setSubitems(EntityStateCollection<Day, OrderItemShipGroupAssocSubitemState> subitems) {
        this.subitems = subitems;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractOrderItemShipGroupAssociationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        subitems = new SimpleOrderItemShipGroupAssocSubitemStateCollection();
    }

    @Override
    public int hashCode() {
        return getProductObjId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof OrderItemShipGroupAssociationState) {
            return Objects.equals(this.getProductObjId(), ((OrderItemShipGroupAssociationState)obj).getProductObjId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    protected void merge(OrderItemShipGroupAssociationState s) {
        if (s == this) {
            return;
        }
        this.setQuantity(s.getQuantity());
        this.setCancelQuantity(s.getCancelQuantity());
        this.setActive(s.getActive());

        if (s.getSubitems() != null) {
            Iterable<OrderItemShipGroupAssocSubitemState> iterable;
            if (s.getSubitems().isLazy()) {
                iterable = s.getSubitems().getLoadedStates();
            } else {
                iterable = s.getSubitems();
            }
            if (iterable != null) {
                for (OrderItemShipGroupAssocSubitemState ss : iterable) {
                    OrderItemShipGroupAssocSubitemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Day, OrderItemShipGroupAssocSubitemState>)this.getSubitems()).getOrAdd(ss.getOrderItemShipGroupAssocSubitemDay());
                    ((AbstractOrderItemShipGroupAssocSubitemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getSubitems() != null) {
            if (s.getSubitems() instanceof EntityStateCollection.ModifiableEntityStateCollection) {
                if (((EntityStateCollection.ModifiableEntityStateCollection)s.getSubitems()).getRemovedStates() != null) {
                    for (OrderItemShipGroupAssocSubitemState ss : ((EntityStateCollection.ModifiableEntityStateCollection<Day, OrderItemShipGroupAssocSubitemState>)s.getSubitems()).getRemovedStates()) {
                        OrderItemShipGroupAssocSubitemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Day, OrderItemShipGroupAssocSubitemState>)this.getSubitems()).getOrAdd(ss.getOrderItemShipGroupAssocSubitemDay());
                        this.getSubitems().remove(thisInnerState);
                    }
                }
            } else {
                if (s.getSubitems().isAllLoaded()) {
                    Set<Day> removedStateIds = new HashSet<>(this.getSubitems().stream().map(i -> i.getOrderItemShipGroupAssocSubitemDay()).collect(java.util.stream.Collectors.toList()));
                    s.getSubitems().forEach(i -> removedStateIds.remove(i.getOrderItemShipGroupAssocSubitemDay()));
                    for (Day i : removedStateIds) {
                        OrderItemShipGroupAssocSubitemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Day, OrderItemShipGroupAssocSubitemState>)this.getSubitems()).getOrAdd(i);
                        this.getSubitems().remove(thisInnerState);
                    }
                }
            }
        }
    }

    public void save() {
        if (subitems instanceof Saveable) {
            ((Saveable)subitems).save();
        }
    }

    protected void throwOnWrongEvent(OrderItemShipGroupAssociationEvent event) {
        String stateEntityIdOrderId = this.getOrderItemShipGroupAssociationId().getOrderId();
        String eventEntityIdOrderId = ((OrderItemShipGroupAssociationEvent.SqlOrderItemShipGroupAssociationEvent)event).getOrderItemShipGroupAssociationEventId().getOrderId();
        if (!stateEntityIdOrderId.equals(eventEntityIdOrderId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id OrderId %1$s in state but entity id OrderId %2$s in event", stateEntityIdOrderId, eventEntityIdOrderId);
        }

        Integer stateEntityIdOrderShipGroupShipGroupSeqId = this.getOrderItemShipGroupAssociationId().getOrderShipGroupShipGroupSeqId();
        Integer eventEntityIdOrderShipGroupShipGroupSeqId = ((OrderItemShipGroupAssociationEvent.SqlOrderItemShipGroupAssociationEvent)event).getOrderItemShipGroupAssociationEventId().getOrderShipGroupShipGroupSeqId();
        if (!stateEntityIdOrderShipGroupShipGroupSeqId.equals(eventEntityIdOrderShipGroupShipGroupSeqId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id OrderShipGroupShipGroupSeqId %1$s in state but entity id OrderShipGroupShipGroupSeqId %2$s in event", stateEntityIdOrderShipGroupShipGroupSeqId, eventEntityIdOrderShipGroupShipGroupSeqId);
        }

        String stateEntityIdProductObjId = this.getOrderItemShipGroupAssociationId().getProductObjId();
        String eventEntityIdProductObjId = ((OrderItemShipGroupAssociationEvent.SqlOrderItemShipGroupAssociationEvent)event).getOrderItemShipGroupAssociationEventId().getProductObjId();
        if (!stateEntityIdProductObjId.equals(eventEntityIdProductObjId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ProductObjId %1$s in state but entity id ProductObjId %2$s in event", stateEntityIdProductObjId, eventEntityIdProductObjId);
        }


        if (getForReapplying()) { return; }

    }


    public static class SimpleOrderItemShipGroupAssociationState extends AbstractOrderItemShipGroupAssociationState {

        public SimpleOrderItemShipGroupAssociationState() {
        }

        public static SimpleOrderItemShipGroupAssociationState newForReapplying() {
            SimpleOrderItemShipGroupAssociationState s = new SimpleOrderItemShipGroupAssociationState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleOrderItemShipGroupAssocSubitemStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<Day, OrderItemShipGroupAssocSubitemState> {

        @Override
        public OrderItemShipGroupAssocSubitemState get(Day orderItemShipGroupAssocSubitemDay) {
            return protectedSubitems.stream().filter(
                            e -> e.getOrderItemShipGroupAssocSubitemDay().equals(orderItemShipGroupAssocSubitemDay))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderItemShipGroupAssocSubitemState> getLoadedStates() {
            return protectedSubitems;
        }

        @Override
        public Collection<OrderItemShipGroupAssocSubitemState> getRemovedStates() {
            return null;
        }

        @Override
        public OrderItemShipGroupAssocSubitemState getOrAdd(Day orderItemShipGroupAssocSubitemDay) {
            OrderItemShipGroupAssocSubitemState s = get(orderItemShipGroupAssocSubitemDay);
            if (s == null) {
                OrderItemShipGroupAssocSubitemId globalId = new OrderItemShipGroupAssocSubitemId(getOrderItemShipGroupAssociationId().getOrderId(), getOrderItemShipGroupAssociationId().getOrderShipGroupShipGroupSeqId(), getOrderItemShipGroupAssociationId().getProductObjId(), orderItemShipGroupAssocSubitemDay);
                AbstractOrderItemShipGroupAssocSubitemState state = new AbstractOrderItemShipGroupAssocSubitemState.SimpleOrderItemShipGroupAssocSubitemState();
                state.setOrderItemShipGroupAssocSubitemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedSubitems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedSubitems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedSubitems.contains(o);
        }

        @Override
        public Iterator<OrderItemShipGroupAssocSubitemState> iterator() {
            return protectedSubitems.iterator();
        }

        @Override
        public Object[] toArray() {
            return protectedSubitems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedSubitems.toArray(a);
        }

        @Override
        public boolean add(OrderItemShipGroupAssocSubitemState s) {
            if (s instanceof AbstractOrderItemShipGroupAssocSubitemState) {
                AbstractOrderItemShipGroupAssocSubitemState state = (AbstractOrderItemShipGroupAssocSubitemState) s;
                state.setProtectedOrderItemShipGroupAssociationState(AbstractOrderItemShipGroupAssociationState.this);
            }
            return protectedSubitems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderItemShipGroupAssocSubitemState) {
                AbstractOrderItemShipGroupAssocSubitemState s = (AbstractOrderItemShipGroupAssocSubitemState) o;
                s.setProtectedOrderItemShipGroupAssociationState(null);
            }
            return protectedSubitems.remove(o);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedSubitems.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderItemShipGroupAssocSubitemState> c) {
            return protectedSubitems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedSubitems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedSubitems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedSubitems.clear();
        }
    }


}

