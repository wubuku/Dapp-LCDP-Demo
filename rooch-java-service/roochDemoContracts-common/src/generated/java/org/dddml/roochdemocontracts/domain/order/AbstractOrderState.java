// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.order;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import org.dddml.roochdemocontracts.domain.*;
import java.util.Date;
import org.dddml.roochdemocontracts.specialization.*;
import org.dddml.roochdemocontracts.domain.order.OrderEvent.*;

public abstract class AbstractOrderState implements OrderState.SqlOrderState, Saveable {

    private String orderId;

    public String getOrderId() {
        return this.orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    private String id_;

    public String getId_() {
        return this.id_;
    }

    public void setId_(String id) {
        this.id_ = id;
    }

    private BigInteger totalAmount;

    public BigInteger getTotalAmount() {
        return this.totalAmount;
    }

    public void setTotalAmount(BigInteger totalAmount) {
        this.totalAmount = totalAmount;
    }

    private Day estimatedShipDate;

    public Day getEstimatedShipDate() {
        return this.estimatedShipDate;
    }

    public void setEstimatedShipDate(Day estimatedShipDate) {
        this.estimatedShipDate = estimatedShipDate;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<OrderItemState> protectedItems = new HashSet<>();

    protected Set<OrderItemState> getProtectedItems() {
        return this.protectedItems;
    }

    protected void setProtectedItems(Set<OrderItemState> protectedItems) {
        this.protectedItems = protectedItems;
    }

    private EntityStateCollection<String, OrderItemState> items;

    public EntityStateCollection<String, OrderItemState> getItems() {
        return this.items;
    }

    public void setItems(EntityStateCollection<String, OrderItemState> items) {
        this.items = items;
    }

    private Set<OrderShipGroupState> protectedOrderShipGroups = new HashSet<>();

    protected Set<OrderShipGroupState> getProtectedOrderShipGroups() {
        return this.protectedOrderShipGroups;
    }

    protected void setProtectedOrderShipGroups(Set<OrderShipGroupState> protectedOrderShipGroups) {
        this.protectedOrderShipGroups = protectedOrderShipGroups;
    }

    private EntityStateCollection<Integer, OrderShipGroupState> orderShipGroups;

    public EntityStateCollection<Integer, OrderShipGroupState> getOrderShipGroups() {
        return this.orderShipGroups;
    }

    public void setOrderShipGroups(EntityStateCollection<Integer, OrderShipGroupState> orderShipGroups) {
        this.orderShipGroups = orderShipGroups;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractOrderState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setOrderId(((OrderEvent.SqlOrderEvent) events.get(0)).getOrderEventId().getOrderId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? OrderState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractOrderState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        items = new SimpleOrderItemStateCollection();
        orderShipGroups = new SimpleOrderShipGroupStateCollection();
    }

    @Override
    public int hashCode() {
        return getOrderId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof OrderState) {
            return Objects.equals(this.getOrderId(), ((OrderState)obj).getOrderId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractOrderEvent.OrderCreated) {
            when((AbstractOrderEvent.OrderCreated)e);
        } else if (e instanceof AbstractOrderEvent.OrderItemRemoved) {
            when((AbstractOrderEvent.OrderItemRemoved)e);
        } else if (e instanceof AbstractOrderEvent.OrderItemQuantityUpdated) {
            when((AbstractOrderEvent.OrderItemQuantityUpdated)e);
        } else if (e instanceof AbstractOrderEvent.OrderEstimatedShipDateUpdated) {
            when((AbstractOrderEvent.OrderEstimatedShipDateUpdated)e);
        } else if (e instanceof AbstractOrderEvent.OrderShipGroupAdded) {
            when((AbstractOrderEvent.OrderShipGroupAdded)e);
        } else if (e instanceof AbstractOrderEvent.OrderShipGroupQuantityCanceled) {
            when((AbstractOrderEvent.OrderShipGroupQuantityCanceled)e);
        } else if (e instanceof AbstractOrderEvent.OrderShipGroupItemRemoved) {
            when((AbstractOrderEvent.OrderShipGroupItemRemoved)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    protected void merge(OrderState s) {
        if (s == this) {
            return;
        }
        this.setTotalAmount(s.getTotalAmount());
        this.setEstimatedShipDate(s.getEstimatedShipDate());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());

        if (s.getItems() != null) {
            Iterable<OrderItemState> iterable;
            if (s.getItems().isLazy()) {
                iterable = s.getItems().getLoadedStates();
            } else {
                iterable = s.getItems();
            }
            if (iterable != null) {
                for (OrderItemState ss : iterable) {
                    OrderItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>)this.getItems()).getOrAdd(ss.getProductObjectId());
                    ((AbstractOrderItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getItems() != null) {
            if (s.getItems() instanceof EntityStateCollection.ModifiableEntityStateCollection) {
                if (((EntityStateCollection.ModifiableEntityStateCollection)s.getItems()).getRemovedStates() != null) {
                    for (OrderItemState ss : ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>)s.getItems()).getRemovedStates()) {
                        OrderItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>)this.getItems()).getOrAdd(ss.getProductObjectId());
                        this.getItems().remove(thisInnerState);
                    }
                }
            } else {
                if (s.getItems().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getItems().stream().map(i -> i.getProductObjectId()).collect(java.util.stream.Collectors.toList()));
                    s.getItems().forEach(i -> removedStateIds.remove(i.getProductObjectId()));
                    for (String i : removedStateIds) {
                        OrderItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>)this.getItems()).getOrAdd(i);
                        this.getItems().remove(thisInnerState);
                    }
                }
            }
        }

        if (s.getOrderShipGroups() != null) {
            Iterable<OrderShipGroupState> iterable;
            if (s.getOrderShipGroups().isLazy()) {
                iterable = s.getOrderShipGroups().getLoadedStates();
            } else {
                iterable = s.getOrderShipGroups();
            }
            if (iterable != null) {
                for (OrderShipGroupState ss : iterable) {
                    OrderShipGroupState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Integer, OrderShipGroupState>)this.getOrderShipGroups()).getOrAdd(ss.getShipGroupSeqId());
                    ((AbstractOrderShipGroupState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getOrderShipGroups() != null) {
            if (s.getOrderShipGroups() instanceof EntityStateCollection.ModifiableEntityStateCollection) {
                if (((EntityStateCollection.ModifiableEntityStateCollection)s.getOrderShipGroups()).getRemovedStates() != null) {
                    for (OrderShipGroupState ss : ((EntityStateCollection.ModifiableEntityStateCollection<Integer, OrderShipGroupState>)s.getOrderShipGroups()).getRemovedStates()) {
                        OrderShipGroupState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Integer, OrderShipGroupState>)this.getOrderShipGroups()).getOrAdd(ss.getShipGroupSeqId());
                        this.getOrderShipGroups().remove(thisInnerState);
                    }
                }
            } else {
                if (s.getOrderShipGroups().isAllLoaded()) {
                    Set<Integer> removedStateIds = new HashSet<>(this.getOrderShipGroups().stream().map(i -> i.getShipGroupSeqId()).collect(java.util.stream.Collectors.toList()));
                    s.getOrderShipGroups().forEach(i -> removedStateIds.remove(i.getShipGroupSeqId()));
                    for (Integer i : removedStateIds) {
                        OrderShipGroupState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<Integer, OrderShipGroupState>)this.getOrderShipGroups()).getOrAdd(i);
                        this.getOrderShipGroups().remove(thisInnerState);
                    }
                }
            }
        }
    }

    public void when(AbstractOrderEvent.OrderCreated e) {
        throwOnWrongEvent(e);

        String productObjId = e.getProductObjId();
        String ProductObjId = productObjId;
        BigInteger quantity = e.getQuantity();
        BigInteger Quantity = quantity;
        BigInteger unitPrice = e.getUnitPrice();
        BigInteger UnitPrice = unitPrice;
        BigInteger totalAmount = e.getTotalAmount();
        BigInteger TotalAmount = totalAmount;
        String owner = e.getOwner();
        String Owner = owner;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.CreateLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, productObjId, quantity, unitPrice, totalAmount, owner, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class CreateLogic {
//    public static OrderState mutate(OrderState orderState, String productObjId, BigInteger quantity, BigInteger unitPrice, BigInteger totalAmount, String owner, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void when(AbstractOrderEvent.OrderItemRemoved e) {
        throwOnWrongEvent(e);

        String productObjId = e.getProductObjId();
        String ProductObjId = productObjId;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.RemoveItemLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, productObjId, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class RemoveItemLogic {
//    public static OrderState mutate(OrderState orderState, String productObjId, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void when(AbstractOrderEvent.OrderItemQuantityUpdated e) {
        throwOnWrongEvent(e);

        String productObjId = e.getProductObjId();
        String ProductObjId = productObjId;
        BigInteger quantity = e.getQuantity();
        BigInteger Quantity = quantity;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.UpdateItemQuantityLogic",
                    "mutate",
                    new Class[]{OrderState.class, String.class, BigInteger.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, productObjId, quantity, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class UpdateItemQuantityLogic {
//    public static OrderState mutate(OrderState orderState, String productObjId, BigInteger quantity, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void when(AbstractOrderEvent.OrderEstimatedShipDateUpdated e) {
        throwOnWrongEvent(e);

        Day estimatedShipDate = e.getEstimatedShipDate();
        Day EstimatedShipDate = estimatedShipDate;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.UpdateEstimatedShipDateLogic",
                    "mutate",
                    new Class[]{OrderState.class, Day.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, estimatedShipDate, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class UpdateEstimatedShipDateLogic {
//    public static OrderState mutate(OrderState orderState, Day estimatedShipDate, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void when(AbstractOrderEvent.OrderShipGroupAdded e) {
        throwOnWrongEvent(e);

        Integer shipGroupSeqId = e.getShipGroupSeqId();
        Integer ShipGroupSeqId = shipGroupSeqId;
        String shipmentMethod = e.getShipmentMethod();
        String ShipmentMethod = shipmentMethod;
        String productObjId = e.getProductObjId();
        String ProductObjId = productObjId;
        BigInteger quantity = e.getQuantity();
        BigInteger Quantity = quantity;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.AddOrderShipGroupLogic",
                    "mutate",
                    new Class[]{OrderState.class, Integer.class, String.class, String.class, BigInteger.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, shipGroupSeqId, shipmentMethod, productObjId, quantity, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class AddOrderShipGroupLogic {
//    public static OrderState mutate(OrderState orderState, Integer shipGroupSeqId, String shipmentMethod, String productObjId, BigInteger quantity, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void when(AbstractOrderEvent.OrderShipGroupQuantityCanceled e) {
        throwOnWrongEvent(e);

        Integer shipGroupSeqId = e.getShipGroupSeqId();
        Integer ShipGroupSeqId = shipGroupSeqId;
        String productObjId = e.getProductObjId();
        String ProductObjId = productObjId;
        BigInteger cancelQuantity = e.getCancelQuantity();
        BigInteger CancelQuantity = cancelQuantity;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.CancelOrderShipGroupQuantityLogic",
                    "mutate",
                    new Class[]{OrderState.class, Integer.class, String.class, BigInteger.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, shipGroupSeqId, productObjId, cancelQuantity, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class CancelOrderShipGroupQuantityLogic {
//    public static OrderState mutate(OrderState orderState, Integer shipGroupSeqId, String productObjId, BigInteger cancelQuantity, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void when(AbstractOrderEvent.OrderShipGroupItemRemoved e) {
        throwOnWrongEvent(e);

        Integer shipGroupSeqId = e.getShipGroupSeqId();
        Integer ShipGroupSeqId = shipGroupSeqId;
        String productObjId = e.getProductObjId();
        String ProductObjId = productObjId;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderState updatedOrderState = (OrderState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.RemoveOrderShipGroupItemLogic",
                    "mutate",
                    new Class[]{OrderState.class, Integer.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, shipGroupSeqId, productObjId, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class RemoveOrderShipGroupItemLogic {
//    public static OrderState mutate(OrderState orderState, Integer shipGroupSeqId, String productObjId, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<OrderState, OrderState.MutableOrderState> mutationContext) {
//    }
//}

        if (this != updatedOrderState) { merge(updatedOrderState); } //else do nothing

    }

    public void save() {
        if (items instanceof Saveable) {
            ((Saveable)items).save();
        }
        if (orderShipGroups instanceof Saveable) {
            ((Saveable)orderShipGroups).save();
        }
    }

    protected void throwOnWrongEvent(OrderEvent event) {
        String stateEntityId = this.getOrderId(); // Aggregate Id
        String eventEntityId = ((OrderEvent.SqlOrderEvent)event).getOrderEventId().getOrderId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleOrderState extends AbstractOrderState {

        public SimpleOrderState() {
        }

        public SimpleOrderState(List<Event> events) {
            super(events);
        }

        public static SimpleOrderState newForReapplying() {
            SimpleOrderState s = new SimpleOrderState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleOrderItemStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState> {

        @Override
        public OrderItemState get(String productObjectId) {
            return protectedItems.stream().filter(
                            e -> e.getProductObjectId().equals(productObjectId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderItemState> getLoadedStates() {
            return protectedItems;
        }

        @Override
        public Collection<OrderItemState> getRemovedStates() {
            return null;
        }

        @Override
        public OrderItemState getOrAdd(String productObjectId) {
            OrderItemState s = get(productObjectId);
            if (s == null) {
                OrderItemId globalId = new OrderItemId(getOrderId(), productObjectId);
                AbstractOrderItemState state = new AbstractOrderItemState.SimpleOrderItemState();
                state.setOrderItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedItems.contains(o);
        }

        @Override
        public Iterator<OrderItemState> iterator() {
            return protectedItems.iterator();
        }

        @Override
        public Object[] toArray() {
            return protectedItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedItems.toArray(a);
        }

        @Override
        public boolean add(OrderItemState s) {
            if (s instanceof AbstractOrderItemState) {
                AbstractOrderItemState state = (AbstractOrderItemState) s;
                state.setProtectedOrderState(AbstractOrderState.this);
            }
            return protectedItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderItemState) {
                AbstractOrderItemState s = (AbstractOrderItemState) o;
                s.setProtectedOrderState(null);
            }
            return protectedItems.remove(o);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedItems.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderItemState> c) {
            return protectedItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedItems.clear();
        }
    }

    class SimpleOrderShipGroupStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<Integer, OrderShipGroupState> {

        @Override
        public OrderShipGroupState get(Integer shipGroupSeqId) {
            return protectedOrderShipGroups.stream().filter(
                            e -> e.getShipGroupSeqId().equals(shipGroupSeqId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderShipGroupState> getLoadedStates() {
            return protectedOrderShipGroups;
        }

        @Override
        public Collection<OrderShipGroupState> getRemovedStates() {
            return null;
        }

        @Override
        public OrderShipGroupState getOrAdd(Integer shipGroupSeqId) {
            OrderShipGroupState s = get(shipGroupSeqId);
            if (s == null) {
                OrderShipGroupId globalId = new OrderShipGroupId(getOrderId(), shipGroupSeqId);
                AbstractOrderShipGroupState state = new AbstractOrderShipGroupState.SimpleOrderShipGroupState();
                state.setOrderShipGroupId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedOrderShipGroups.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedOrderShipGroups.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedOrderShipGroups.contains(o);
        }

        @Override
        public Iterator<OrderShipGroupState> iterator() {
            return protectedOrderShipGroups.iterator();
        }

        @Override
        public Object[] toArray() {
            return protectedOrderShipGroups.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedOrderShipGroups.toArray(a);
        }

        @Override
        public boolean add(OrderShipGroupState s) {
            if (s instanceof AbstractOrderShipGroupState) {
                AbstractOrderShipGroupState state = (AbstractOrderShipGroupState) s;
                state.setProtectedOrderState(AbstractOrderState.this);
            }
            return protectedOrderShipGroups.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderShipGroupState) {
                AbstractOrderShipGroupState s = (AbstractOrderShipGroupState) o;
                s.setProtectedOrderState(null);
            }
            return protectedOrderShipGroups.remove(o);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedOrderShipGroups.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderShipGroupState> c) {
            return protectedOrderShipGroups.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedOrderShipGroups.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedOrderShipGroups.retainAll(c);
        }

        @Override
        public void clear() {
            protectedOrderShipGroups.clear();
        }
    }


}

