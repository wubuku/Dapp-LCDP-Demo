// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.order;

import java.util.*;
import java.math.BigInteger;
import org.dddml.roochdemocontracts.domain.*;
import java.util.Date;
import org.dddml.roochdemocontracts.specialization.*;

public abstract class AbstractOrderAggregate extends AbstractAggregate implements OrderAggregate {
    private OrderState.MutableOrderState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractOrderAggregate(OrderState state) {
        this.state = (OrderState.MutableOrderState)state;
    }

    public OrderState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        OrderCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleOrderAggregate extends AbstractOrderAggregate {
        public SimpleOrderAggregate(OrderState state) {
            super(state);
        }

        @Override
        public void create(String productObjId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId, OrderCommands.Create c) {
            try {
                verifyCreate(productObjId, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderCreated(productObjId, quantity, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void removeItem(String productObjId, Long offChainVersion, String commandId, String requesterId, OrderCommands.RemoveItem c) {
            try {
                verifyRemoveItem(productObjId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderItemRemoved(productObjId, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void updateItemQuantity(String productObjId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId, OrderCommands.UpdateItemQuantity c) {
            try {
                verifyUpdateItemQuantity(productObjId, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderItemQuantityUpdated(productObjId, quantity, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void updateEstimatedShipDate(Day estimatedShipDate, Long offChainVersion, String commandId, String requesterId, OrderCommands.UpdateEstimatedShipDate c) {
            try {
                verifyUpdateEstimatedShipDate(estimatedShipDate, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderEstimatedShipDateUpdated(estimatedShipDate, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void addOrderShipGroup(Integer shipGroupSeqId, String shipmentMethod, String productObjId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId, OrderCommands.AddOrderShipGroup c) {
            try {
                verifyAddOrderShipGroup(shipGroupSeqId, shipmentMethod, productObjId, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderShipGroupAdded(shipGroupSeqId, shipmentMethod, productObjId, quantity, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void addOrderItemShipGroupAssocSubitem(Integer shipGroupSeqId, String productObjId, Day day, String description, Long offChainVersion, String commandId, String requesterId, OrderCommands.AddOrderItemShipGroupAssocSubitem c) {
            try {
                verifyAddOrderItemShipGroupAssocSubitem(shipGroupSeqId, productObjId, day, description, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderItemShipGroupAssocSubitemAdded(shipGroupSeqId, productObjId, day, description, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void cancelOrderShipGroupQuantity(Integer shipGroupSeqId, String productObjId, BigInteger cancelQuantity, Long offChainVersion, String commandId, String requesterId, OrderCommands.CancelOrderShipGroupQuantity c) {
            try {
                verifyCancelOrderShipGroupQuantity(shipGroupSeqId, productObjId, cancelQuantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderShipGroupQuantityCanceled(shipGroupSeqId, productObjId, cancelQuantity, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void removeOrderShipGroupItem(Integer shipGroupSeqId, String productObjId, Long offChainVersion, String commandId, String requesterId, OrderCommands.RemoveOrderShipGroupItem c) {
            try {
                verifyRemoveOrderShipGroupItem(shipGroupSeqId, productObjId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newOrderShipGroupItemRemoved(shipGroupSeqId, productObjId, offChainVersion, commandId, requesterId);
            apply(e);
        }

        protected void verifyCreate(String productObjId, BigInteger quantity, OrderCommands.Create c) {
            String ProductObjId = productObjId;
            BigInteger Quantity = quantity;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.CreateLogic",
                    "verify",
                    new Class[]{OrderState.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{getState(), productObjId, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class CreateLogic {
//    public static void verify(OrderState orderState, String productObjId, BigInteger quantity, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyRemoveItem(String productObjId, OrderCommands.RemoveItem c) {
            String ProductObjId = productObjId;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.RemoveItemLogic",
                    "verify",
                    new Class[]{OrderState.class, String.class, VerificationContext.class},
                    new Object[]{getState(), productObjId, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class RemoveItemLogic {
//    public static void verify(OrderState orderState, String productObjId, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyUpdateItemQuantity(String productObjId, BigInteger quantity, OrderCommands.UpdateItemQuantity c) {
            String ProductObjId = productObjId;
            BigInteger Quantity = quantity;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.UpdateItemQuantityLogic",
                    "verify",
                    new Class[]{OrderState.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{getState(), productObjId, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class UpdateItemQuantityLogic {
//    public static void verify(OrderState orderState, String productObjId, BigInteger quantity, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyUpdateEstimatedShipDate(Day estimatedShipDate, OrderCommands.UpdateEstimatedShipDate c) {
            Day EstimatedShipDate = estimatedShipDate;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.UpdateEstimatedShipDateLogic",
                    "verify",
                    new Class[]{OrderState.class, Day.class, VerificationContext.class},
                    new Object[]{getState(), estimatedShipDate, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class UpdateEstimatedShipDateLogic {
//    public static void verify(OrderState orderState, Day estimatedShipDate, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyAddOrderShipGroup(Integer shipGroupSeqId, String shipmentMethod, String productObjId, BigInteger quantity, OrderCommands.AddOrderShipGroup c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ShipmentMethod = shipmentMethod;
            String ProductObjId = productObjId;
            BigInteger Quantity = quantity;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.AddOrderShipGroupLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{getState(), shipGroupSeqId, shipmentMethod, productObjId, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class AddOrderShipGroupLogic {
//    public static void verify(OrderState orderState, Integer shipGroupSeqId, String shipmentMethod, String productObjId, BigInteger quantity, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyAddOrderItemShipGroupAssocSubitem(Integer shipGroupSeqId, String productObjId, Day day, String description, OrderCommands.AddOrderItemShipGroupAssocSubitem c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ProductObjId = productObjId;
            Day Day = day;
            String Description = description;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.AddOrderItemShipGroupAssocSubitemLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, Day.class, String.class, VerificationContext.class},
                    new Object[]{getState(), shipGroupSeqId, productObjId, day, description, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class AddOrderItemShipGroupAssocSubitemLogic {
//    public static void verify(OrderState orderState, Integer shipGroupSeqId, String productObjId, Day day, String description, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyCancelOrderShipGroupQuantity(Integer shipGroupSeqId, String productObjId, BigInteger cancelQuantity, OrderCommands.CancelOrderShipGroupQuantity c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ProductObjId = productObjId;
            BigInteger CancelQuantity = cancelQuantity;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.CancelOrderShipGroupQuantityLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{getState(), shipGroupSeqId, productObjId, cancelQuantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class CancelOrderShipGroupQuantityLogic {
//    public static void verify(OrderState orderState, Integer shipGroupSeqId, String productObjId, BigInteger cancelQuantity, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyRemoveOrderShipGroupItem(Integer shipGroupSeqId, String productObjId, OrderCommands.RemoveOrderShipGroupItem c) {
            Integer ShipGroupSeqId = shipGroupSeqId;
            String ProductObjId = productObjId;

            ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.order.RemoveOrderShipGroupItemLogic",
                    "verify",
                    new Class[]{OrderState.class, Integer.class, String.class, VerificationContext.class},
                    new Object[]{getState(), shipGroupSeqId, productObjId, VerificationContext.forCommand(c)}
            );

//package org.dddml.roochdemocontracts.domain.order;
//
//public class RemoveOrderShipGroupItemLogic {
//    public static void verify(OrderState orderState, Integer shipGroupSeqId, String productObjId, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected AbstractOrderEvent.OrderCreated newOrderCreated(String productObjId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderCreated e = new AbstractOrderEvent.OrderCreated();

            e.setProductObjId(productObjId);
            e.setQuantity(quantity);
            e.setUnitPrice(null); // todo Need to update 'verify' method to return event properties.
            e.setTotalAmount(null); // todo Need to update 'verify' method to return event properties.
            e.setOwner(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderItemRemoved newOrderItemRemoved(String productObjId, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderItemRemoved e = new AbstractOrderEvent.OrderItemRemoved();

            e.setProductObjId(productObjId);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderItemQuantityUpdated newOrderItemQuantityUpdated(String productObjId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderItemQuantityUpdated e = new AbstractOrderEvent.OrderItemQuantityUpdated();

            e.setProductObjId(productObjId);
            e.setQuantity(quantity);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderEstimatedShipDateUpdated newOrderEstimatedShipDateUpdated(Day estimatedShipDate, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderEstimatedShipDateUpdated e = new AbstractOrderEvent.OrderEstimatedShipDateUpdated();

            e.setEstimatedShipDate(estimatedShipDate);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderShipGroupAdded newOrderShipGroupAdded(Integer shipGroupSeqId, String shipmentMethod, String productObjId, BigInteger quantity, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderShipGroupAdded e = new AbstractOrderEvent.OrderShipGroupAdded();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setShipmentMethod(shipmentMethod);
            e.setProductObjId(productObjId);
            e.setQuantity(quantity);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderItemShipGroupAssocSubitemAdded newOrderItemShipGroupAssocSubitemAdded(Integer shipGroupSeqId, String productObjId, Day day, String description, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderItemShipGroupAssocSubitemAdded e = new AbstractOrderEvent.OrderItemShipGroupAssocSubitemAdded();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setProductObjId(productObjId);
            e.setDay(day);
            e.setDescription(description);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderShipGroupQuantityCanceled newOrderShipGroupQuantityCanceled(Integer shipGroupSeqId, String productObjId, BigInteger cancelQuantity, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderShipGroupQuantityCanceled e = new AbstractOrderEvent.OrderShipGroupQuantityCanceled();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setProductObjId(productObjId);
            e.setCancelQuantity(cancelQuantity);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

        protected AbstractOrderEvent.OrderShipGroupItemRemoved newOrderShipGroupItemRemoved(Integer shipGroupSeqId, String productObjId, Long offChainVersion, String commandId, String requesterId) {
            OrderEventId eventId = new OrderEventId(getState().getOrderId(), null);
            AbstractOrderEvent.OrderShipGroupItemRemoved e = new AbstractOrderEvent.OrderShipGroupItemRemoved();

            e.setShipGroupSeqId(shipGroupSeqId);
            e.setProductObjId(productObjId);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setOrderEventId(eventId);
            return e;
        }

    }

}

