// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.order;

import java.util.*;
import java.util.Date;
import org.dddml.roochdemocontracts.domain.*;
import org.dddml.roochdemocontracts.specialization.*;
import org.dddml.roochdemocontracts.domain.AbstractEvent;

public abstract class AbstractOrderItemShipGroupAssociationEvent extends AbstractEvent implements OrderItemShipGroupAssociationEvent.SqlOrderItemShipGroupAssociationEvent {
    private OrderItemShipGroupAssociationEventId orderItemShipGroupAssociationEventId = new OrderItemShipGroupAssociationEventId();

    public OrderItemShipGroupAssociationEventId getOrderItemShipGroupAssociationEventId() {
        return this.orderItemShipGroupAssociationEventId;
    }

    public void setOrderItemShipGroupAssociationEventId(OrderItemShipGroupAssociationEventId eventId) {
        this.orderItemShipGroupAssociationEventId = eventId;
    }
    
    public String getProductObjId() {
        return getOrderItemShipGroupAssociationEventId().getProductObjId();
    }

    public void setProductObjId(String productObjId) {
        getOrderItemShipGroupAssociationEventId().setProductObjId(productObjId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractOrderItemShipGroupAssociationEvent() {
    }

    protected AbstractOrderItemShipGroupAssociationEvent(OrderItemShipGroupAssociationEventId eventId) {
        this.orderItemShipGroupAssociationEventId = eventId;
    }

    protected OrderItemShipGroupAssocSubitemEventDao getOrderItemShipGroupAssocSubitemEventDao() {
        return (OrderItemShipGroupAssocSubitemEventDao)ApplicationContext.current.get("orderItemShipGroupAssocSubitemEventDao");
    }

    protected OrderItemShipGroupAssocSubitemEventId newOrderItemShipGroupAssocSubitemEventId(Day orderItemShipGroupAssocSubitemDay)
    {
        OrderItemShipGroupAssocSubitemEventId eventId = new OrderItemShipGroupAssocSubitemEventId(this.getOrderItemShipGroupAssociationEventId().getOrderId(), this.getOrderItemShipGroupAssociationEventId().getOrderShipGroupShipGroupSeqId(), this.getOrderItemShipGroupAssociationEventId().getProductObjId(), 
            orderItemShipGroupAssocSubitemDay, 
            this.getOrderItemShipGroupAssociationEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderItemShipGroupAssocSubitemEvent.SqlOrderItemShipGroupAssocSubitemEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderItemShipGroupAssociationEvent.SqlOrderItemShipGroupAssociationEvent oe, OrderItemShipGroupAssocSubitemEvent.SqlOrderItemShipGroupAssocSubitemEvent e)
    {
        if (!oe.getOrderItemShipGroupAssociationEventId().getOrderId().equals(e.getOrderItemShipGroupAssocSubitemEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderItemShipGroupAssociationEventId().getOrderId(), e.getOrderItemShipGroupAssocSubitemEventId().getOrderId());
        }
        if (!oe.getOrderItemShipGroupAssociationEventId().getOrderShipGroupShipGroupSeqId().equals(e.getOrderItemShipGroupAssocSubitemEventId().getOrderShipGroupShipGroupSeqId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderShipGroupShipGroupSeqId %1$s but inner id OrderShipGroupShipGroupSeqId %2$s", 
                oe.getOrderItemShipGroupAssociationEventId().getOrderShipGroupShipGroupSeqId(), e.getOrderItemShipGroupAssocSubitemEventId().getOrderShipGroupShipGroupSeqId());
        }
        if (!oe.getOrderItemShipGroupAssociationEventId().getProductObjId().equals(e.getOrderItemShipGroupAssocSubitemEventId().getOrderItemShipGroupAssociationProductObjId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id ProductObjId %1$s but inner id OrderItemShipGroupAssociationProductObjId %2$s", 
                oe.getOrderItemShipGroupAssociationEventId().getProductObjId(), e.getOrderItemShipGroupAssocSubitemEventId().getOrderItemShipGroupAssociationProductObjId());
        }
    }


    public abstract String getEventType();


}

