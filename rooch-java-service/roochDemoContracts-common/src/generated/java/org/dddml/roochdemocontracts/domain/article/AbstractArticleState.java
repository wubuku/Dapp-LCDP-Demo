// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.article;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.roochdemocontracts.domain.*;
import org.dddml.roochdemocontracts.specialization.*;
import org.dddml.roochdemocontracts.domain.article.ArticleEvent.*;

public abstract class AbstractArticleState implements ArticleState.SqlArticleState, Saveable {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private String title;

    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    private String author;

    public String getAuthor() {
        return this.author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    private String content;

    public String getContent() {
        return this.content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    private Set<String> tags;

    public Set<String> getTags() {
        return this.tags;
    }

    public void setTags(Set<String> tags) {
        this.tags = tags;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<ReferenceState> protectedReferences = new HashSet<>();

    protected Set<ReferenceState> getProtectedReferences() {
        return this.protectedReferences;
    }

    protected void setProtectedReferences(Set<ReferenceState> protectedReferences) {
        this.protectedReferences = protectedReferences;
    }

    private EntityStateCollection<BigInteger, ReferenceState> references;

    public EntityStateCollection<BigInteger, ReferenceState> getReferences() {
        return this.references;
    }

    public void setReferences(EntityStateCollection<BigInteger, ReferenceState> references) {
        this.references = references;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractArticleState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((ArticleEvent.SqlArticleEvent) events.get(0)).getArticleEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? ArticleState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractArticleState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        references = new SimpleReferenceStateCollection();
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ArticleState) {
            return Objects.equals(this.getId(), ((ArticleState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractArticleEvent.ArticleCreated) {
            when((AbstractArticleEvent.ArticleCreated)e);
        } else if (e instanceof AbstractArticleEvent.ReferenceAdded) {
            when((AbstractArticleEvent.ReferenceAdded)e);
        } else if (e instanceof AbstractArticleEvent.ReferenceUpdated) {
            when((AbstractArticleEvent.ReferenceUpdated)e);
        } else if (e instanceof AbstractArticleEvent.ReferenceRemoved) {
            when((AbstractArticleEvent.ReferenceRemoved)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    protected void merge(ArticleState s) {
        if (s == this) {
            return;
        }
        this.setTitle(s.getTitle());
        this.setAuthor(s.getAuthor());
        this.setContent(s.getContent());
        this.setTags(s.getTags());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());

        if (s.getReferences() != null) {
            Iterable<ReferenceState> iterable;
            if (s.getReferences().isLazy()) {
                iterable = s.getReferences().getLoadedStates();
            } else {
                iterable = s.getReferences();
            }
            if (iterable != null) {
                for (ReferenceState ss : iterable) {
                    ReferenceState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<BigInteger, ReferenceState>)this.getReferences()).getOrAdd(ss.getReferenceNumber());
                    ((AbstractReferenceState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getReferences() != null) {
            if (s.getReferences() instanceof EntityStateCollection.ModifiableEntityStateCollection) {
                if (((EntityStateCollection.ModifiableEntityStateCollection)s.getReferences()).getRemovedStates() != null) {
                    for (ReferenceState ss : ((EntityStateCollection.ModifiableEntityStateCollection<BigInteger, ReferenceState>)s.getReferences()).getRemovedStates()) {
                        ReferenceState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<BigInteger, ReferenceState>)this.getReferences()).getOrAdd(ss.getReferenceNumber());
                        this.getReferences().remove(thisInnerState);
                    }
                }
            } else {
                if (s.getReferences().isAllLoaded()) {
                    Set<BigInteger> removedStateIds = new HashSet<>(this.getReferences().stream().map(i -> i.getReferenceNumber()).collect(java.util.stream.Collectors.toList()));
                    s.getReferences().forEach(i -> removedStateIds.remove(i.getReferenceNumber()));
                    for (BigInteger i : removedStateIds) {
                        ReferenceState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<BigInteger, ReferenceState>)this.getReferences()).getOrAdd(i);
                        this.getReferences().remove(thisInnerState);
                    }
                }
            }
        }
    }

    public void when(AbstractArticleEvent.ArticleCreated e) {
        throwOnWrongEvent(e);

        String title = e.getTitle();
        String Title = title;
        String author = e.getAuthor();
        String Author = author;
        String content = e.getContent();
        String Content = content;
        ReferenceVO[] references = e.getReferences();
        ReferenceVO[] References = references;
        String[] tags = e.getTags();
        String[] Tags = tags;
        String owner = e.getOwner();
        String Owner = owner;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ArticleState updatedArticleState = (ArticleState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.article.CreateLogic",
                    "mutate",
                    new Class[]{ArticleState.class, String.class, String.class, String.class, ReferenceVO[].class, String[].class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, title, author, content, references, tags, owner, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.article;
//
//public class CreateLogic {
//    public static ArticleState mutate(ArticleState articleState, String title, String author, String content, ReferenceVO[] references, String[] tags, String owner, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<ArticleState, ArticleState.MutableArticleState> mutationContext) {
//    }
//}

        if (this != updatedArticleState) { merge(updatedArticleState); } //else do nothing

    }

    public void when(AbstractArticleEvent.ReferenceAdded e) {
        throwOnWrongEvent(e);

        BigInteger referenceNumber = e.getReferenceNumber();
        BigInteger ReferenceNumber = referenceNumber;
        String title = e.getTitle();
        String Title = title;
        String url = e.getUrl();
        String Url = url;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ArticleState updatedArticleState = (ArticleState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.article.AddReferenceLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, referenceNumber, title, url, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.article;
//
//public class AddReferenceLogic {
//    public static ArticleState mutate(ArticleState articleState, BigInteger referenceNumber, String title, String url, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<ArticleState, ArticleState.MutableArticleState> mutationContext) {
//    }
//}

        if (this != updatedArticleState) { merge(updatedArticleState); } //else do nothing

    }

    public void when(AbstractArticleEvent.ReferenceUpdated e) {
        throwOnWrongEvent(e);

        BigInteger referenceNumber = e.getReferenceNumber();
        BigInteger ReferenceNumber = referenceNumber;
        String title = e.getTitle();
        String Title = title;
        String url = e.getUrl();
        String Url = url;
        String author = e.getAuthor();
        String Author = author;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ArticleState updatedArticleState = (ArticleState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.article.UpdateReferenceLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, referenceNumber, title, url, author, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.article;
//
//public class UpdateReferenceLogic {
//    public static ArticleState mutate(ArticleState articleState, BigInteger referenceNumber, String title, String url, String author, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<ArticleState, ArticleState.MutableArticleState> mutationContext) {
//    }
//}

        if (this != updatedArticleState) { merge(updatedArticleState); } //else do nothing

    }

    public void when(AbstractArticleEvent.ReferenceRemoved e) {
        throwOnWrongEvent(e);

        BigInteger referenceNumber = e.getReferenceNumber();
        BigInteger ReferenceNumber = referenceNumber;
        RoochEventId roochEventId = e.getRoochEventId();
        RoochEventId RoochEventId = roochEventId;
        String roochSender = e.getRoochSender();
        String RoochSender = roochSender;
        String roochTxHash = e.getRoochTxHash();
        String RoochTxHash = roochTxHash;
        String roochTypeTag = e.getRoochTypeTag();
        String RoochTypeTag = roochTypeTag;
        Long roochTimestampMs = e.getRoochTimestampMs();
        Long RoochTimestampMs = roochTimestampMs;
        BigInteger roochBlockHeight = e.getRoochBlockHeight();
        BigInteger RoochBlockHeight = roochBlockHeight;
        Long roochEventIndex = e.getRoochEventIndex();
        Long RoochEventIndex = roochEventIndex;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ArticleState updatedArticleState = (ArticleState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.roochdemocontracts.domain.article.RemoveReferenceLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new Object[]{this, referenceNumber, roochEventId, roochSender, roochTxHash, roochTypeTag, roochTimestampMs, roochBlockHeight, roochEventIndex, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.roochdemocontracts.domain.article;
//
//public class RemoveReferenceLogic {
//    public static ArticleState mutate(ArticleState articleState, BigInteger referenceNumber, RoochEventId roochEventId, String roochSender, String roochTxHash, String roochTypeTag, Long roochTimestampMs, BigInteger roochBlockHeight, Long roochEventIndex, String status, MutationContext<ArticleState, ArticleState.MutableArticleState> mutationContext) {
//    }
//}

        if (this != updatedArticleState) { merge(updatedArticleState); } //else do nothing

    }

    public void save() {
        if (references instanceof Saveable) {
            ((Saveable)references).save();
        }
    }

    protected void throwOnWrongEvent(ArticleEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((ArticleEvent.SqlArticleEvent)event).getArticleEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleArticleState extends AbstractArticleState {

        public SimpleArticleState() {
        }

        public SimpleArticleState(List<Event> events) {
            super(events);
        }

        public static SimpleArticleState newForReapplying() {
            SimpleArticleState s = new SimpleArticleState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleReferenceStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<BigInteger, ReferenceState> {

        @Override
        public ReferenceState get(BigInteger referenceNumber) {
            return protectedReferences.stream().filter(
                            e -> e.getReferenceNumber().equals(referenceNumber))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<ReferenceState> getLoadedStates() {
            return protectedReferences;
        }

        @Override
        public Collection<ReferenceState> getRemovedStates() {
            return null;
        }

        @Override
        public ReferenceState getOrAdd(BigInteger referenceNumber) {
            ReferenceState s = get(referenceNumber);
            if (s == null) {
                ArticleReferenceId globalId = new ArticleReferenceId(getId(), referenceNumber);
                AbstractReferenceState state = new AbstractReferenceState.SimpleReferenceState();
                state.setArticleReferenceId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedReferences.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedReferences.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedReferences.contains(o);
        }

        @Override
        public Iterator<ReferenceState> iterator() {
            return protectedReferences.iterator();
        }

        @Override
        public Object[] toArray() {
            return protectedReferences.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedReferences.toArray(a);
        }

        @Override
        public boolean add(ReferenceState s) {
            if (s instanceof AbstractReferenceState) {
                AbstractReferenceState state = (AbstractReferenceState) s;
                state.setProtectedArticleState(AbstractArticleState.this);
            }
            return protectedReferences.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractReferenceState) {
                AbstractReferenceState s = (AbstractReferenceState) o;
                s.setProtectedArticleState(null);
            }
            return protectedReferences.remove(o);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedReferences.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends ReferenceState> c) {
            return protectedReferences.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedReferences.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedReferences.retainAll(c);
        }

        @Override
        public void clear() {
            protectedReferences.clear();
        }
    }


}

