// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.article;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.roochdemocontracts.domain.*;
import org.dddml.roochdemocontracts.specialization.*;


public class ArticleStateDto {

    private String id;

    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    private String title;

    public String getTitle()
    {
        return this.title;
    }

    public void setTitle(String title)
    {
        this.title = title;
    }

    private String author;

    public String getAuthor()
    {
        return this.author;
    }

    public void setAuthor(String author)
    {
        this.author = author;
    }

    private String content;

    public String getContent()
    {
        return this.content;
    }

    public void setContent(String content)
    {
        this.content = content;
    }

    private BigInteger version;

    public BigInteger getVersion()
    {
        return this.version;
    }

    public void setVersion(BigInteger version)
    {
        this.version = version;
    }

    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }

    private Long offChainVersion;

    public Long getOffChainVersion()
    {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion)
    {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt)
    {
        this.updatedAt = updatedAt;
    }

    private ReferenceStateDto[] references;

    public ReferenceStateDto[] getReferences()
    {
        return this.references;
    }    

    public void setReferences(ReferenceStateDto[] references)
    {
        this.references = references;
    }

    private String[] tags;

    public String[] getTags() {
        return this.tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{"References"});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public ArticleStateDto[] toArticleStateDtoArray(Iterable<ArticleState> states) {
            return toArticleStateDtoList(states).toArray(new ArticleStateDto[0]);
        }

        public List<ArticleStateDto> toArticleStateDtoList(Iterable<ArticleState> states) {
            ArrayList<ArticleStateDto> stateDtos = new ArrayList();
            for (ArticleState s : states) {
                ArticleStateDto dto = toArticleStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public ArticleStateDto toArticleStateDto(ArticleState state)
        {
            if(state == null) {
                return null;
            }
            ArticleStateDto dto = new ArticleStateDto();
            if (returnedFieldsContains("Id")) {
                dto.setId(state.getId());
            }
            if (returnedFieldsContains("Title")) {
                dto.setTitle(state.getTitle());
            }
            if (returnedFieldsContains("Author")) {
                dto.setAuthor(state.getAuthor());
            }
            if (returnedFieldsContains("Content")) {
                dto.setContent(state.getContent());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("Active")) {
                dto.setActive(state.getActive());
            }
            if (returnedFieldsContains("OffChainVersion")) {
                dto.setOffChainVersion(state.getOffChainVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            if (returnedFieldsContains("Tags")) {
                ArrayList<String> arrayList = new ArrayList();
                if (state.getTags() != null) {
                    for (String s : state.getTags()) {
                        arrayList.add(s);
                    }
                }
                dto.setTags(arrayList.toArray(new String[0]));
            }
            if (returnedFieldsContains("References")) {
                ArrayList<ReferenceStateDto> arrayList = new ArrayList();
                if (state.getReferences() != null) {
                    ReferenceStateDto.DtoConverter conv = new ReferenceStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "References");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (ReferenceState s : state.getReferences()) {
                        arrayList.add(conv.toReferenceStateDto(s));
                    }
                }
                dto.setReferences(arrayList.toArray(new ReferenceStateDto[0]));
            }
            return dto;
        }

    }
}

