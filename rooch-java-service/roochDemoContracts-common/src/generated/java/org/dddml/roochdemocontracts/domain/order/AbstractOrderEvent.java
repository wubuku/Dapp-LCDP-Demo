// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.domain.order;

import java.util.*;
import java.math.BigInteger;
import org.dddml.roochdemocontracts.domain.*;
import java.util.Date;
import org.dddml.roochdemocontracts.specialization.*;
import org.dddml.roochdemocontracts.domain.AbstractEvent;

public abstract class AbstractOrderEvent extends AbstractEvent implements OrderEvent.SqlOrderEvent, RoochEvent.MutableRoochEvent, HasStatus.MutableHasStatus {
    private OrderEventId orderEventId = new OrderEventId();

    public OrderEventId getOrderEventId() {
        return this.orderEventId;
    }

    public void setOrderEventId(OrderEventId eventId) {
        this.orderEventId = eventId;
    }
    
    public String getOrderId() {
        return getOrderEventId().getOrderId();
    }

    public void setOrderId(String orderId) {
        getOrderEventId().setOrderId(orderId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getOrderEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getOrderEventId().setVersion(version);
    }

    private String id_;

    public String getId_() {
        return this.id_;
    }
    
    public void setId_(String id) {
        this.id_ = id;
    }

    private BigInteger roochEventVersion;

    public BigInteger getRoochEventVersion() {
        return this.roochEventVersion;
    }
    
    public void setRoochEventVersion(BigInteger roochEventVersion) {
        this.roochEventVersion = roochEventVersion;
    }

    private BigInteger roochEventSequenceNumber;

    public BigInteger getRoochEventSequenceNumber() {
        return this.roochEventSequenceNumber;
    }
    
    public void setRoochEventSequenceNumber(BigInteger roochEventSequenceNumber) {
        this.roochEventSequenceNumber = roochEventSequenceNumber;
    }

    private String roochEventType;

    public String getRoochEventType() {
        return this.roochEventType;
    }
    
    public void setRoochEventType(String roochEventType) {
        this.roochEventType = roochEventType;
    }

    private RoochEventGuid roochEventGuid;

    public RoochEventGuid getRoochEventGuid() {
        return this.roochEventGuid;
    }
    
    public void setRoochEventGuid(RoochEventGuid roochEventGuid) {
        this.roochEventGuid = roochEventGuid;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractOrderEvent() {
    }

    protected AbstractOrderEvent(OrderEventId eventId) {
        this.orderEventId = eventId;
    }

    protected OrderItemEventDao getOrderItemEventDao() {
        return (OrderItemEventDao)ApplicationContext.current.get("orderItemEventDao");
    }

    protected OrderItemEventId newOrderItemEventId(String productObjectId)
    {
        OrderItemEventId eventId = new OrderItemEventId(this.getOrderEventId().getOrderId(), 
            productObjectId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderItemEvent.SqlOrderItemEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderItemEvent.SqlOrderItemEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderItemEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderItemEventId().getOrderId());
        }
    }

    protected OrderShipGroupEventDao getOrderShipGroupEventDao() {
        return (OrderShipGroupEventDao)ApplicationContext.current.get("orderShipGroupEventDao");
    }

    protected OrderShipGroupEventId newOrderShipGroupEventId(Integer shipGroupSeqId)
    {
        OrderShipGroupEventId eventId = new OrderShipGroupEventId(this.getOrderEventId().getOrderId(), 
            shipGroupSeqId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderShipGroupEvent.SqlOrderShipGroupEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderShipGroupEvent.SqlOrderShipGroupEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderShipGroupEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderShipGroupEventId().getOrderId());
        }
    }


    public abstract String getEventType();

    public static class OrderClobEvent extends  AbstractOrderEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "OrderClobEvent";
        }

    }

    public static class OrderCreated extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderCreated";
        }

        public String getProductObjId() {
            Object val = getDynamicProperties().get("productObjId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProductObjId(String value) {
            getDynamicProperties().put("productObjId", value);
        }

        public BigInteger getQuantity() {
            Object val = getDynamicProperties().get("quantity");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setQuantity(BigInteger value) {
            getDynamicProperties().put("quantity", value);
        }

        public BigInteger getUnitPrice() {
            Object val = getDynamicProperties().get("unitPrice");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setUnitPrice(BigInteger value) {
            getDynamicProperties().put("unitPrice", value);
        }

        public BigInteger getTotalAmount() {
            Object val = getDynamicProperties().get("totalAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setTotalAmount(BigInteger value) {
            getDynamicProperties().put("totalAmount", value);
        }

        public String getOwner() {
            Object val = getDynamicProperties().get("owner");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setOwner(String value) {
            getDynamicProperties().put("owner", value);
        }

    }

    public static class OrderItemRemoved extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderItemRemoved";
        }

        public String getProductObjId() {
            Object val = getDynamicProperties().get("productObjId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProductObjId(String value) {
            getDynamicProperties().put("productObjId", value);
        }

    }

    public static class OrderItemQuantityUpdated extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderItemQuantityUpdated";
        }

        public String getProductObjId() {
            Object val = getDynamicProperties().get("productObjId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProductObjId(String value) {
            getDynamicProperties().put("productObjId", value);
        }

        public BigInteger getQuantity() {
            Object val = getDynamicProperties().get("quantity");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setQuantity(BigInteger value) {
            getDynamicProperties().put("quantity", value);
        }

    }

    public static class OrderEstimatedShipDateUpdated extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderEstimatedShipDateUpdated";
        }

        public Day getEstimatedShipDate() {
            Object val = getDynamicProperties().get("estimatedShipDate");
            if (val instanceof Day) {
                return (Day) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Day.class);
        }

        public void setEstimatedShipDate(Day value) {
            getDynamicProperties().put("estimatedShipDate", value);
        }

    }

    public static class OrderShipGroupAdded extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderShipGroupAdded";
        }

        public Integer getShipGroupSeqId() {
            Object val = getDynamicProperties().get("shipGroupSeqId");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setShipGroupSeqId(Integer value) {
            getDynamicProperties().put("shipGroupSeqId", value);
        }

        public String getShipmentMethod() {
            Object val = getDynamicProperties().get("shipmentMethod");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setShipmentMethod(String value) {
            getDynamicProperties().put("shipmentMethod", value);
        }

        public String getProductObjId() {
            Object val = getDynamicProperties().get("productObjId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProductObjId(String value) {
            getDynamicProperties().put("productObjId", value);
        }

        public BigInteger getQuantity() {
            Object val = getDynamicProperties().get("quantity");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setQuantity(BigInteger value) {
            getDynamicProperties().put("quantity", value);
        }

    }

    public static class OrderShipGroupQuantityCanceled extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderShipGroupQuantityCanceled";
        }

        public Integer getShipGroupSeqId() {
            Object val = getDynamicProperties().get("shipGroupSeqId");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setShipGroupSeqId(Integer value) {
            getDynamicProperties().put("shipGroupSeqId", value);
        }

        public String getProductObjId() {
            Object val = getDynamicProperties().get("productObjId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProductObjId(String value) {
            getDynamicProperties().put("productObjId", value);
        }

        public BigInteger getCancelQuantity() {
            Object val = getDynamicProperties().get("cancelQuantity");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCancelQuantity(BigInteger value) {
            getDynamicProperties().put("cancelQuantity", value);
        }

    }

    public static class OrderShipGroupItemRemoved extends OrderClobEvent {

        @Override
        public String getEventType() {
            return "OrderShipGroupItemRemoved";
        }

        public Integer getShipGroupSeqId() {
            Object val = getDynamicProperties().get("shipGroupSeqId");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setShipGroupSeqId(Integer value) {
            getDynamicProperties().put("shipGroupSeqId", value);
        }

        public String getProductObjId() {
            Object val = getDynamicProperties().get("productObjId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProductObjId(String value) {
            getDynamicProperties().put("productObjId", value);
        }

    }


}

