// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.rooch.contract;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.bean.AnnotatedMoveOptionView;
import com.github.wubuku.rooch.bean.EventID;
import org.dddml.roochdemocontracts.domain.RoochEvent;
import org.dddml.roochdemocontracts.domain.RoochEventId;
import org.dddml.roochdemocontracts.domain.article.AbstractArticleEvent;
import org.dddml.roochdemocontracts.domain.daysummary.AbstractDaySummaryEvent;
import org.dddml.roochdemocontracts.domain.order.AbstractOrderEvent;
import org.dddml.roochdemocontracts.domain.order.OrderItemShipGroupAssocSubitemId;
import org.dddml.roochdemocontracts.domain.order.OrderItemShipGroupAssociationId;
import org.dddml.roochdemocontracts.domain.product.AbstractProductEvent;
import org.dddml.roochdemocontracts.domain.tag.AbstractTagEvent;
import org.dddml.roochdemocontracts.rooch.contract.article.ArticleCreated;
import org.dddml.roochdemocontracts.rooch.contract.article.ReferenceAdded;
import org.dddml.roochdemocontracts.rooch.contract.article.ReferenceRemoved;
import org.dddml.roochdemocontracts.rooch.contract.article.ReferenceUpdated;
import org.dddml.roochdemocontracts.rooch.contract.daysummary.DaySummaryCreated;
import org.dddml.roochdemocontracts.rooch.contract.order.*;
import org.dddml.roochdemocontracts.rooch.contract.product.ProductCreated;
import org.dddml.roochdemocontracts.rooch.contract.tag.TagCreated;

import java.math.BigInteger;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.dddml.roochdemocontracts.domain.Day toDay(Day contractDay) {
        if (contractDay == null) {
            return null;
        }
        org.dddml.roochdemocontracts.domain.Day day = new org.dddml.roochdemocontracts.domain.Day();
        day.setMonth(toMonth(contractDay.getValue().getMonth()));
        day.setNumber(contractDay.getValue().getNumber());
        day.setTimeZone(contractDay.getValue().getTimeZone());
        return day;
    }

    public static org.dddml.roochdemocontracts.domain.Month toMonth(Month contractMonth) {
        if (contractMonth == null) {
            return null;
        }
        org.dddml.roochdemocontracts.domain.Month month = new org.dddml.roochdemocontracts.domain.Month();
        month.setYear(toYear(contractMonth.getValue().getYear()));
        month.setNumber(contractMonth.getValue().getNumber());
        month.setIsLeap(contractMonth.getValue().getIsLeap());
        return month;
    }

    public static org.dddml.roochdemocontracts.domain.ReferenceVO toReferenceVO(ReferenceVO contractReferenceVO) {
        if (contractReferenceVO == null) {
            return null;
        }
        org.dddml.roochdemocontracts.domain.ReferenceVO referenceVO = new org.dddml.roochdemocontracts.domain.ReferenceVO();
        referenceVO.setReferenceNumber(contractReferenceVO.getValue().getReferenceNumber());
        referenceVO.setTitle(contractReferenceVO.getValue().getTitle());
        referenceVO.setUrl(contractReferenceVO.getValue().getUrl().getValue().getVec().length == 0 ? null : contractReferenceVO.getValue().getUrl().getValue().getVec()[0]);
        return referenceVO;
    }

    public static org.dddml.roochdemocontracts.domain.Year toYear(Year contractYear) {
        if (contractYear == null) {
            return null;
        }
        org.dddml.roochdemocontracts.domain.Year year = new org.dddml.roochdemocontracts.domain.Year();
        year.setNumber(contractYear.getValue().getNumber());
        year.setCalendar(contractYear.getValue().getCalendar());
        return year;
    }


    public static AbstractArticleEvent.ArticleCreated toArticleCreated(AnnotatedEventView<ArticleCreated> eventEnvelope) {
        ArticleCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ArticleCreated articleCreated = new AbstractArticleEvent.ArticleCreated();
        articleCreated.setId(contractEvent.getId().getValue().getVec()[0]);
        articleCreated.setTitle(contractEvent.getTitle());
        articleCreated.setAuthor(contractEvent.getAuthor());
        articleCreated.setContent(contractEvent.getContent());
        articleCreated.setReferences(java.util.Arrays.stream(contractEvent.getReferences()).map(DomainBeanUtils::toReferenceVO).toArray(org.dddml.roochdemocontracts.domain.ReferenceVO[]::new));
        articleCreated.setTags(contractEvent.getTags());
        articleCreated.setOwner(contractEvent.getOwner());
        articleCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(articleCreated, eventEnvelope);

        return articleCreated;
    }

    public static AbstractArticleEvent.ReferenceAdded toReferenceAdded(AnnotatedEventView<ReferenceAdded> eventEnvelope) {
        ReferenceAdded contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ReferenceAdded referenceAdded = new AbstractArticleEvent.ReferenceAdded();
        referenceAdded.setId(contractEvent.getId());
        referenceAdded.setReferenceNumber(contractEvent.getReferenceNumber());
        referenceAdded.setTitle(contractEvent.getTitle());
        referenceAdded.setUrl(extractOptionalValue(contractEvent.getUrl()));
        referenceAdded.setVersion(contractEvent.getVersion());

        setRoochEventProperties(referenceAdded, eventEnvelope);

        return referenceAdded;
    }

    public static AbstractArticleEvent.ReferenceUpdated toReferenceUpdated(AnnotatedEventView<ReferenceUpdated> eventEnvelope) {
        ReferenceUpdated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ReferenceUpdated referenceUpdated = new AbstractArticleEvent.ReferenceUpdated();
        referenceUpdated.setId(contractEvent.getId());
        referenceUpdated.setReferenceNumber(contractEvent.getReferenceNumber());
        referenceUpdated.setTitle(contractEvent.getTitle());
        referenceUpdated.setUrl(extractOptionalValue(contractEvent.getUrl()));
        referenceUpdated.setAuthor(extractOptionalValue(contractEvent.getAuthor()));
        referenceUpdated.setVersion(contractEvent.getVersion());

        setRoochEventProperties(referenceUpdated, eventEnvelope);

        return referenceUpdated;
    }

    public static AbstractArticleEvent.ReferenceRemoved toReferenceRemoved(AnnotatedEventView<ReferenceRemoved> eventEnvelope) {
        ReferenceRemoved contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ReferenceRemoved referenceRemoved = new AbstractArticleEvent.ReferenceRemoved();
        referenceRemoved.setId(contractEvent.getId());
        referenceRemoved.setReferenceNumber(contractEvent.getReferenceNumber());
        referenceRemoved.setVersion(contractEvent.getVersion());

        setRoochEventProperties(referenceRemoved, eventEnvelope);

        return referenceRemoved;
    }

    public static AbstractTagEvent.TagCreated toTagCreated(AnnotatedEventView<TagCreated> eventEnvelope) {
        TagCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractTagEvent.TagCreated tagCreated = new AbstractTagEvent.TagCreated();
        tagCreated.setName(contractEvent.getName());
        tagCreated.setId_(contractEvent.getId().getValue().getVec()[0]);
        tagCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(tagCreated, eventEnvelope);

        return tagCreated;
    }

    public static AbstractProductEvent.ProductCreated toProductCreated(AnnotatedEventView<ProductCreated> eventEnvelope) {
        ProductCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractProductEvent.ProductCreated productCreated = new AbstractProductEvent.ProductCreated();
        productCreated.setProductId(contractEvent.getProductId());
        productCreated.setId_(contractEvent.getId().getValue().getVec()[0]);
        productCreated.setName(contractEvent.getName());
        productCreated.setUnitPrice(contractEvent.getUnitPrice());
        productCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(productCreated, eventEnvelope);

        return productCreated;
    }

    public static AbstractOrderEvent.OrderCreated toOrderCreated(AnnotatedEventView<OrderCreated> eventEnvelope) {
        OrderCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderCreated orderCreated = new AbstractOrderEvent.OrderCreated();
        orderCreated.setOrderId(contractEvent.getOrderId());
        orderCreated.setId_(contractEvent.getId().getValue().getVec()[0]);
        orderCreated.setProductObjId(contractEvent.getProductObjId());
        orderCreated.setQuantity(contractEvent.getQuantity());
        orderCreated.setUnitPrice(contractEvent.getUnitPrice());
        orderCreated.setTotalAmount(contractEvent.getTotalAmount());
        orderCreated.setOwner(contractEvent.getOwner());
        orderCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(orderCreated, eventEnvelope);

        return orderCreated;
    }

    public static AbstractOrderEvent.OrderItemRemoved toOrderItemRemoved(AnnotatedEventView<OrderItemRemoved> eventEnvelope) {
        OrderItemRemoved contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderItemRemoved orderItemRemoved = new AbstractOrderEvent.OrderItemRemoved();
        orderItemRemoved.setOrderId(contractEvent.getOrderId());
        orderItemRemoved.setId_(contractEvent.getId());
        orderItemRemoved.setProductObjId(contractEvent.getProductObjId());
        orderItemRemoved.setVersion(contractEvent.getVersion());

        setRoochEventProperties(orderItemRemoved, eventEnvelope);

        return orderItemRemoved;
    }

    public static AbstractOrderEvent.OrderItemQuantityUpdated toOrderItemQuantityUpdated(AnnotatedEventView<OrderItemQuantityUpdated> eventEnvelope) {
        OrderItemQuantityUpdated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderItemQuantityUpdated orderItemQuantityUpdated = new AbstractOrderEvent.OrderItemQuantityUpdated();
        orderItemQuantityUpdated.setOrderId(contractEvent.getOrderId());
        orderItemQuantityUpdated.setId_(contractEvent.getId());
        orderItemQuantityUpdated.setProductObjId(contractEvent.getProductObjId());
        orderItemQuantityUpdated.setQuantity(contractEvent.getQuantity());
        orderItemQuantityUpdated.setVersion(contractEvent.getVersion());

        setRoochEventProperties(orderItemQuantityUpdated, eventEnvelope);

        return orderItemQuantityUpdated;
    }

    public static AbstractOrderEvent.OrderEstimatedShipDateUpdated toOrderEstimatedShipDateUpdated(AnnotatedEventView<OrderEstimatedShipDateUpdated> eventEnvelope) {
        OrderEstimatedShipDateUpdated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderEstimatedShipDateUpdated orderEstimatedShipDateUpdated = new AbstractOrderEvent.OrderEstimatedShipDateUpdated();
        orderEstimatedShipDateUpdated.setOrderId(contractEvent.getOrderId());
        orderEstimatedShipDateUpdated.setId_(contractEvent.getId());
        orderEstimatedShipDateUpdated.setEstimatedShipDate(DomainBeanUtils.toDay(contractEvent.getEstimatedShipDate()));
        orderEstimatedShipDateUpdated.setVersion(contractEvent.getVersion());

        setRoochEventProperties(orderEstimatedShipDateUpdated, eventEnvelope);

        return orderEstimatedShipDateUpdated;
    }

    public static AbstractOrderEvent.OrderShipGroupAdded toOrderShipGroupAdded(AnnotatedEventView<OrderShipGroupAdded> eventEnvelope) {
        OrderShipGroupAdded contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderShipGroupAdded orderShipGroupAdded = new AbstractOrderEvent.OrderShipGroupAdded();
        orderShipGroupAdded.setOrderId(contractEvent.getOrderId());
        orderShipGroupAdded.setId_(contractEvent.getId());
        orderShipGroupAdded.setShipGroupSeqId(contractEvent.getShipGroupSeqId());
        orderShipGroupAdded.setShipmentMethod(contractEvent.getShipmentMethod());
        orderShipGroupAdded.setProductObjId(contractEvent.getProductObjId());
        orderShipGroupAdded.setQuantity(contractEvent.getQuantity());
        orderShipGroupAdded.setVersion(contractEvent.getVersion());

        setRoochEventProperties(orderShipGroupAdded, eventEnvelope);

        return orderShipGroupAdded;
    }

    public static AbstractOrderEvent.OrderShipGroupQuantityCanceled toOrderShipGroupQuantityCanceled(AnnotatedEventView<OrderShipGroupQuantityCanceled> eventEnvelope) {
        OrderShipGroupQuantityCanceled contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderShipGroupQuantityCanceled orderShipGroupQuantityCanceled = new AbstractOrderEvent.OrderShipGroupQuantityCanceled();
        orderShipGroupQuantityCanceled.setOrderId(contractEvent.getOrderId());
        orderShipGroupQuantityCanceled.setId_(contractEvent.getId());
        orderShipGroupQuantityCanceled.setShipGroupSeqId(contractEvent.getShipGroupSeqId());
        orderShipGroupQuantityCanceled.setProductObjId(contractEvent.getProductObjId());
        orderShipGroupQuantityCanceled.setCancelQuantity(contractEvent.getCancelQuantity());
        orderShipGroupQuantityCanceled.setVersion(contractEvent.getVersion());

        setRoochEventProperties(orderShipGroupQuantityCanceled, eventEnvelope);

        return orderShipGroupQuantityCanceled;
    }

    public static AbstractOrderEvent.OrderShipGroupItemRemoved toOrderShipGroupItemRemoved(AnnotatedEventView<OrderShipGroupItemRemoved> eventEnvelope) {
        OrderShipGroupItemRemoved contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractOrderEvent.OrderShipGroupItemRemoved orderShipGroupItemRemoved = new AbstractOrderEvent.OrderShipGroupItemRemoved();
        orderShipGroupItemRemoved.setOrderId(contractEvent.getOrderId());
        orderShipGroupItemRemoved.setId_(contractEvent.getId());
        orderShipGroupItemRemoved.setShipGroupSeqId(contractEvent.getShipGroupSeqId());
        orderShipGroupItemRemoved.setProductObjId(contractEvent.getProductObjId());
        orderShipGroupItemRemoved.setVersion(contractEvent.getVersion());

        setRoochEventProperties(orderShipGroupItemRemoved, eventEnvelope);

        return orderShipGroupItemRemoved;
    }

    public static AbstractDaySummaryEvent.DaySummaryCreated toDaySummaryCreated(AnnotatedEventView<DaySummaryCreated> eventEnvelope) {
        DaySummaryCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractDaySummaryEvent.DaySummaryCreated daySummaryCreated = new AbstractDaySummaryEvent.DaySummaryCreated();
        daySummaryCreated.setDay(DomainBeanUtils.toDay(contractEvent.getDay()));
        daySummaryCreated.setId_(contractEvent.getId().getValue().getVec()[0]);
        daySummaryCreated.setDescription(contractEvent.getDescription());
        daySummaryCreated.setMetaData(contractEvent.getMetaData());
        daySummaryCreated.setArrayData(contractEvent.getArrayData());
        daySummaryCreated.setOptionalData(extractOptionalValue(contractEvent.getOptionalData()));
        daySummaryCreated.setU16ArrayData(contractEvent.getU16ArrayData());
        daySummaryCreated.setU32ArrayData(contractEvent.getU32ArrayData());
        daySummaryCreated.setU64ArrayData(contractEvent.getU64ArrayData());
        daySummaryCreated.setU128ArrayData(contractEvent.getU128ArrayData());
        daySummaryCreated.setU256ArrayData(contractEvent.getU256ArrayData());
        daySummaryCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(daySummaryCreated, eventEnvelope);

        return daySummaryCreated;
    }

    public static org.dddml.roochdemocontracts.rooch.contract.persistence.OrderItemShipGroupAssocSubitemTableItemAdded toPersistenceOrderItemShipGroupAssocSubitemTableItemAdded(AnnotatedEventView<OrderItemShipGroupAssocSubitemTableItemAdded> eventEnvelope) {
        OrderItemShipGroupAssocSubitemTableItemAdded contractEvent = eventEnvelope.getParsedEventData().getValue();
        OrderItemShipGroupAssocSubitemId id = new OrderItemShipGroupAssocSubitemId(contractEvent.getOrderId(), contractEvent.getOrderShipGroupShipGroupSeqId(), contractEvent.getOrderItemShipGroupAssociationProductObjId(), toDay(contractEvent.getOrderItemShipGroupAssocSubitemDay()));
        org.dddml.roochdemocontracts.rooch.contract.persistence.OrderItemShipGroupAssocSubitemTableItemAdded e = new org.dddml.roochdemocontracts.rooch.contract.persistence.OrderItemShipGroupAssocSubitemTableItemAdded();
        e.setOrderItemShipGroupAssocSubitemId(id);
        setRoochEventProperties(e, eventEnvelope);
        //e.setCreatedAt(new Date());
        return e;
    }

    public static org.dddml.roochdemocontracts.rooch.contract.persistence.OrderItemShipGroupAssociationTableItemAdded toPersistenceOrderItemShipGroupAssociationTableItemAdded(AnnotatedEventView<OrderItemShipGroupAssociationTableItemAdded> eventEnvelope) {
        OrderItemShipGroupAssociationTableItemAdded contractEvent = eventEnvelope.getParsedEventData().getValue();
        OrderItemShipGroupAssociationId id = new OrderItemShipGroupAssociationId(contractEvent.getOrderId(), contractEvent.getOrderShipGroupShipGroupSeqId(), contractEvent.getProductObjId());
        org.dddml.roochdemocontracts.rooch.contract.persistence.OrderItemShipGroupAssociationTableItemAdded e = new org.dddml.roochdemocontracts.rooch.contract.persistence.OrderItemShipGroupAssociationTableItemAdded();
        e.setOrderItemShipGroupAssociationId(id);
        setRoochEventProperties(e, eventEnvelope);
        //e.setCreatedAt(new Date());
        return e;
    }

    public static void setRoochEventProperties(RoochEvent.MutableRoochEvent domainRoochEvent, AnnotatedEventView<?> eventEnvelope) {
        domainRoochEvent.setRoochEventId(toRoochEventId(eventEnvelope.getEvent().getEventId()));
        domainRoochEvent.setRoochTypeTag(eventEnvelope.getEvent().getTypeTag());
        domainRoochEvent.setRoochEventIndex(eventEnvelope.getEvent().getEventIndex());
        domainRoochEvent.setRoochTxHash(eventEnvelope.getTxHash());
        domainRoochEvent.setRoochSender(eventEnvelope.getSender());
        domainRoochEvent.setRoochTimestampMs(eventEnvelope.getTimestampMs());
    }

    public static RoochEventId toRoochEventId(EventID eventId) {
        return new RoochEventId(eventId.getEventHandleId(), eventId.getEventSeq());
    }

    private static <T> T extractOptionalValue(AnnotatedMoveOptionView<T> optionView) {
        return optionView == null ? null
                : (optionView.getValue().getVec() == null || optionView.getValue().getVec().length == 0) ? null
                : optionView.getValue().getVec()[0];
    }
}
