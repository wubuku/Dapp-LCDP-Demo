// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.rooch.contract.service;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;

import org.dddml.roochdemocontracts.domain.article.AbstractArticleEvent;
import org.dddml.roochdemocontracts.rooch.contract.ContractConstants;
import org.dddml.roochdemocontracts.rooch.contract.DomainBeanUtils;
import org.dddml.roochdemocontracts.rooch.contract.article.ArticleCreated;
import org.dddml.roochdemocontracts.rooch.contract.article.ReferenceAdded;
import org.dddml.roochdemocontracts.rooch.contract.article.ReferenceUpdated;
import org.dddml.roochdemocontracts.rooch.contract.article.ReferenceRemoved;
import org.dddml.roochdemocontracts.rooch.contract.repository.ArticleEventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.*;
import java.util.*;

@Service
public class ArticleEventService {
    @Value("${rooch.contract.address}")
    private String contractAddress;

    @Autowired
    private RoochJsonRpcClient roochJsonRpcClient;

    @Autowired
    private ArticleEventRepository articleEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractArticleEvent event) {
        event.setStatus("D");
        articleEventRepository.save(event);
    }

    @Transactional
    public void pullArticleCreatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_CREATED;
        BigInteger cursor = getArticleCreatedEventNextCursor();
        while (true) {
            List<AnnotatedEventView<ArticleCreated>> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ArticleCreated.class
            );
            if (eventPage != null && !eventPage.isEmpty()) {
                // //////////////////////
                BigInteger nextCursor = eventPage.get(0).getEvent().getEventId().getEventSeq();
                if (cursor != null && nextCursor.compareTo(cursor) == 0) {
                    System.out.println("nextCursor == cursor, exit");
                    break;
                }
                cursor = nextCursor;
                // /////////////////////
                for (AnnotatedEventView<ArticleCreated> eventEnvelope : eventPage) {
                    saveArticleCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (eventPage == null || eventPage.size() == 0) {
                break;
            }
        }
    }

    private BigInteger getArticleCreatedEventNextCursor() {
        AbstractArticleEvent.ArticleCreated lastEvent = articleEventRepository.findFirstArticleCreatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveArticleCreated(AnnotatedEventView<ArticleCreated> eventEnvelope) {
        AbstractArticleEvent.ArticleCreated articleCreated = DomainBeanUtils.toArticleCreated(eventEnvelope);
        if (articleEventRepository.findById(articleCreated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleCreated);
    }

    @Transactional
    public void pullReferenceAddedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_REFERENCE_ADDED;
        BigInteger cursor = getReferenceAddedEventNextCursor();
        while (true) {
            List<AnnotatedEventView<ReferenceAdded>> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ReferenceAdded.class
            );
            if (eventPage != null && !eventPage.isEmpty()) {
                // //////////////////////
                BigInteger nextCursor = eventPage.get(0).getEvent().getEventId().getEventSeq();
                if (cursor != null && nextCursor.compareTo(cursor) == 0) {
                    System.out.println("nextCursor == cursor, exit");
                    break;
                }
                cursor = nextCursor;
                // /////////////////////
                for (AnnotatedEventView<ReferenceAdded> eventEnvelope : eventPage) {
                    saveReferenceAdded(eventEnvelope);
                }
            } else {
                break;
            }
            if (eventPage == null || eventPage.size() == 0) {
                break;
            }
        }
    }

    private BigInteger getReferenceAddedEventNextCursor() {
        AbstractArticleEvent.ReferenceAdded lastEvent = articleEventRepository.findFirstReferenceAddedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveReferenceAdded(AnnotatedEventView<ReferenceAdded> eventEnvelope) {
        AbstractArticleEvent.ReferenceAdded referenceAdded = DomainBeanUtils.toReferenceAdded(eventEnvelope);
        if (articleEventRepository.findById(referenceAdded.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(referenceAdded);
    }

    @Transactional
    public void pullReferenceUpdatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_REFERENCE_UPDATED;
        BigInteger cursor = getReferenceUpdatedEventNextCursor();
        while (true) {
            List<AnnotatedEventView<ReferenceUpdated>> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ReferenceUpdated.class
            );
            if (eventPage != null && !eventPage.isEmpty()) {
                // //////////////////////
                BigInteger nextCursor = eventPage.get(0).getEvent().getEventId().getEventSeq();
                if (cursor != null && nextCursor.compareTo(cursor) == 0) {
                    System.out.println("nextCursor == cursor, exit");
                    break;
                }
                cursor = nextCursor;
                // /////////////////////
                for (AnnotatedEventView<ReferenceUpdated> eventEnvelope : eventPage) {
                    saveReferenceUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (eventPage == null || eventPage.size() == 0) {
                break;
            }
        }
    }

    private BigInteger getReferenceUpdatedEventNextCursor() {
        AbstractArticleEvent.ReferenceUpdated lastEvent = articleEventRepository.findFirstReferenceUpdatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveReferenceUpdated(AnnotatedEventView<ReferenceUpdated> eventEnvelope) {
        AbstractArticleEvent.ReferenceUpdated referenceUpdated = DomainBeanUtils.toReferenceUpdated(eventEnvelope);
        if (articleEventRepository.findById(referenceUpdated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(referenceUpdated);
    }

    @Transactional
    public void pullReferenceRemovedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_REFERENCE_REMOVED;
        BigInteger cursor = getReferenceRemovedEventNextCursor();
        while (true) {
            List<AnnotatedEventView<ReferenceRemoved>> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ReferenceRemoved.class
            );
            if (eventPage != null && !eventPage.isEmpty()) {
                // //////////////////////
                BigInteger nextCursor = eventPage.get(0).getEvent().getEventId().getEventSeq();
                if (cursor != null && nextCursor.compareTo(cursor) == 0) {
                    System.out.println("nextCursor == cursor, exit");
                    break;
                }
                cursor = nextCursor;
                // /////////////////////
                for (AnnotatedEventView<ReferenceRemoved> eventEnvelope : eventPage) {
                    saveReferenceRemoved(eventEnvelope);
                }
            } else {
                break;
            }
            if (eventPage == null || eventPage.size() == 0) {
                break;
            }
        }
    }

    private BigInteger getReferenceRemovedEventNextCursor() {
        AbstractArticleEvent.ReferenceRemoved lastEvent = articleEventRepository.findFirstReferenceRemovedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveReferenceRemoved(AnnotatedEventView<ReferenceRemoved> eventEnvelope) {
        AbstractArticleEvent.ReferenceRemoved referenceRemoved = DomainBeanUtils.toReferenceRemoved(eventEnvelope);
        if (articleEventRepository.findById(referenceRemoved.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(referenceRemoved);
    }

}
