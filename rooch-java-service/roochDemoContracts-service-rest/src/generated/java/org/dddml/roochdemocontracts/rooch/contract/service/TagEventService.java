// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.rooch.contract.service;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;
import com.github.wubuku.rooch.bean.EventPageView;
import com.github.wubuku.rooch.bean.PageView;

import org.dddml.roochdemocontracts.domain.tag.AbstractTagEvent;
import org.dddml.roochdemocontracts.rooch.contract.ContractConstants;
import org.dddml.roochdemocontracts.rooch.contract.DomainBeanUtils;
import org.dddml.roochdemocontracts.rooch.contract.tag.TagCreated;
import org.dddml.roochdemocontracts.rooch.contract.repository.TagEventRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.*;
import java.util.*;

@Service
public class TagEventService {
    @Value("${rooch.contract.address}")
    private String contractAddress;

    @Autowired
    private RoochJsonRpcClient roochJsonRpcClient;

    @Autowired
    private TagEventRepository tagEventRepository;


    @Transactional
    public void updateStatusToProcessed(AbstractTagEvent event) {
        event.setStatus("D");
        tagEventRepository.save(event);
    }

    @Transactional
    public void pullTagCreatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.TAG_MODULE_TAG_CREATED;
        BigInteger cursor = getTagCreatedEventNextCursor();
        while (true) {
            EventPageView<TagCreated> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, TagCreated.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<TagCreated> eventEnvelope : eventPage.getData()) {
                    saveTagCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getTagCreatedEventNextCursor() {
        AbstractTagEvent.TagCreated lastEvent = tagEventRepository.findFirstTagCreatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveTagCreated(AnnotatedEventView<TagCreated> eventEnvelope) {
        AbstractTagEvent.TagCreated tagCreated = DomainBeanUtils.toTagCreated(eventEnvelope);
        if (tagEventRepository.findById(tagCreated.getTagEventId()).isPresent()) {
            return;
        }
        tagEventRepository.save(tagCreated);
    }

}
