// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.rooch.contract.service;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;

import org.dddml.roochdemocontracts.domain.product.AbstractProductEvent;
import org.dddml.roochdemocontracts.rooch.contract.ContractConstants;
import org.dddml.roochdemocontracts.rooch.contract.DomainBeanUtils;
import org.dddml.roochdemocontracts.rooch.contract.product.ProductCreated;
import org.dddml.roochdemocontracts.rooch.contract.repository.ProductEventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.*;
import java.util.*;

@Service
public class ProductEventService {
    @Value("${rooch.contract.address}")
    private String contractAddress;

    @Autowired
    private RoochJsonRpcClient roochJsonRpcClient;

    @Autowired
    private ProductEventRepository productEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractProductEvent event) {
        event.setStatus("D");
        productEventRepository.save(event);
    }

    @Transactional
    public void pullProductCreatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.PRODUCT_MODULE_PRODUCT_CREATED;
        BigInteger cursor = getProductCreatedEventNextCursor();
        while (true) {
            List<AnnotatedEventView<ProductCreated>> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ProductCreated.class
            );
            if (eventPage != null && !eventPage.isEmpty()) {
                // //////////////////////
                BigInteger nextCursor = eventPage.get(0).getEvent().getEventId().getEventSeq();
                if (cursor != null && nextCursor.compareTo(cursor) == 0) {
                    System.out.println("nextCursor == cursor, exit");
                    break;
                }
                cursor = nextCursor;
                // /////////////////////
                for (AnnotatedEventView<ProductCreated> eventEnvelope : eventPage) {
                    saveProductCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (eventPage == null || eventPage.size() == 0) {
                break;
            }
        }
    }

    private BigInteger getProductCreatedEventNextCursor() {
        AbstractProductEvent.ProductCreated lastEvent = productEventRepository.findFirstProductCreatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveProductCreated(AnnotatedEventView<ProductCreated> eventEnvelope) {
        AbstractProductEvent.ProductCreated productCreated = DomainBeanUtils.toProductCreated(eventEnvelope);
        if (productEventRepository.findById(productCreated.getProductEventId()).isPresent()) {
            return;
        }
        productEventRepository.save(productCreated);
    }

}
