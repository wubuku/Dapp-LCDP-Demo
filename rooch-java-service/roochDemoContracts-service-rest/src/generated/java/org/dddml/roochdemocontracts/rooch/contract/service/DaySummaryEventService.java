// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.roochdemocontracts.rooch.contract.service;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;

import org.dddml.roochdemocontracts.domain.daysummary.AbstractDaySummaryEvent;
import org.dddml.roochdemocontracts.rooch.contract.ContractConstants;
import org.dddml.roochdemocontracts.rooch.contract.DomainBeanUtils;
import org.dddml.roochdemocontracts.rooch.contract.daysummary.DaySummaryCreated;
import org.dddml.roochdemocontracts.rooch.contract.repository.DaySummaryEventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.*;
import java.util.*;

@Service
public class DaySummaryEventService {
    @Value("${rooch.contract.address}")
    private String contractAddress;

    @Autowired
    private RoochJsonRpcClient roochJsonRpcClient;

    @Autowired
    private DaySummaryEventRepository daySummaryEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractDaySummaryEvent event) {
        event.setStatus("D");
        daySummaryEventRepository.save(event);
    }

    @Transactional
    public void pullDaySummaryCreatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.DAY_SUMMARY_MODULE_DAY_SUMMARY_CREATED;
        BigInteger cursor = getDaySummaryCreatedEventNextCursor();
        while (true) {
            List<AnnotatedEventView<DaySummaryCreated>> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, DaySummaryCreated.class
            );
            if (eventPage != null && !eventPage.isEmpty()) {
                // //////////////////////
                BigInteger nextCursor = eventPage.get(0).getEvent().getEventId().getEventSeq();
                if (cursor != null && nextCursor.compareTo(cursor) == 0) {
                    System.out.println("nextCursor == cursor, exit");
                    break;
                }
                cursor = nextCursor;
                // /////////////////////
                for (AnnotatedEventView<DaySummaryCreated> eventEnvelope : eventPage) {
                    saveDaySummaryCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (eventPage == null || eventPage.size() == 0) {
                break;
            }
        }
    }

    private BigInteger getDaySummaryCreatedEventNextCursor() {
        AbstractDaySummaryEvent.DaySummaryCreated lastEvent = daySummaryEventRepository.findFirstDaySummaryCreatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveDaySummaryCreated(AnnotatedEventView<DaySummaryCreated> eventEnvelope) {
        AbstractDaySummaryEvent.DaySummaryCreated daySummaryCreated = DomainBeanUtils.toDaySummaryCreated(eventEnvelope);
        if (daySummaryEventRepository.findById(daySummaryCreated.getDaySummaryEventId()).isPresent()) {
            return;
        }
        daySummaryEventRepository.save(daySummaryCreated);
    }

}
