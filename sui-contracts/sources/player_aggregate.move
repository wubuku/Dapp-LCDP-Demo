// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_demo_contracts::player_aggregate {
    use std::string::String;
    use sui::tx_context;
    use sui_demo_contracts::player;
    use sui_demo_contracts::player_create_logic;
    use sui_demo_contracts::player_delete_logic;
    use sui_demo_contracts::player_update_logic;

    public entry fun create(
        nickname: std::ascii::String,
        intro: String,
        player_id_table: &mut player::PlayerIdTable,
        ctx: &mut tx_context::TxContext,
    ) {
        let player_created = player_create_logic::verify(
            nickname,
            intro,
            player_id_table,
            ctx,
        );
        let player = player_create_logic::mutate(
            &player_created,
            player_id_table,
            ctx,
        );
        player::set_player_created_id(&mut player_created, player::id(&player));
        player::transfer_object(player, tx_context::sender(ctx));
        player::emit_player_created(player_created);
    }

    public entry fun update(
        player: player::Player,
        nickname: std::ascii::String,
        intro: String,
        ctx: &mut tx_context::TxContext,
    ) {
        let player_updated = player_update_logic::verify(
            nickname,
            intro,
            &player,
            ctx,
        );
        let updated_player = player_update_logic::mutate(
            &player_updated,
            player,
            ctx,
        );
        player::update_version_and_transfer_object(updated_player, tx_context::sender(ctx));
        player::emit_player_updated(player_updated);
    }

    public entry fun delete(
        player: player::Player,
        ctx: &mut tx_context::TxContext,
    ) {
        let player_deleted = player_delete_logic::verify(
            &player,
            ctx,
        );
        let updated_player = player_delete_logic::mutate(
            &player_deleted,
            player,
            ctx,
        );
        player::drop_player(updated_player);
        player::emit_player_deleted(player_deleted);
    }

}
