// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosdemocontracts.aptos.contract.service;

import com.github.wubuku.aptos.utils.NodeApiClient;
import org.dddml.aptosdemocontracts.domain.*;
import org.dddml.aptosdemocontracts.domain.order.*;
import org.dddml.aptosdemocontracts.aptos.contract.repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.stream.*;
import java.util.*;
import java.math.*;

@Service
public class AptosOrderService {

    @Autowired
    private OrderStateRepository orderStateRepository;

    @Autowired
    private OrderItemTableItemAddedRepository orderItemTableItemAddedRepository;
    @Autowired
    private OrderShipGroupTableItemAddedRepository orderShipGroupTableItemAddedRepository;
    @Autowired
    private OrderItemShipGroupAssociationTableItemAddedRepository orderItemShipGroupAssociationTableItemAddedRepository;
    @Autowired
    private OrderItemShipGroupAssocSubitemTableItemAddedRepository orderItemShipGroupAssocSubitemTableItemAddedRepository;
    @Autowired
    private OrderEventService orderEventService;

    private AptosOrderStateRetriever aptosOrderStateRetriever;

    @Autowired
    public AptosOrderService(
        @Value("${aptos.contract.address}")
        String aptosContractAddress,
        NodeApiClient aptosNodeApiClient,
        AptosAccountRepository aptosAccountRepository
    ) {
        this.aptosOrderStateRetriever = new AptosOrderStateRetriever(
                aptosNodeApiClient,
                aptosContractAddress,
                aptosAccountRepository,
                orderId -> {
                    OrderState.MutableOrderState s = new AbstractOrderState.SimpleOrderState();
                    s.setOrderId(orderId);
                    return s;
                },
                (orderState, productId) -> (OrderItemState.MutableOrderItemState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>) orderState.getItems()).getOrAddDefault(productId),
                orderId -> {
                    orderEventService.pullOrderItemTableItemAddedEvents();
                    return orderItemTableItemAddedRepository.findByOrderItemId_OrderId(orderId).stream()
                            .map(i -> i.getOrderItemId().getProductId()).collect(Collectors.toList());
                },
                (orderState, shipGroupSeqId) -> (OrderShipGroupState.MutableOrderShipGroupState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<Integer, OrderShipGroupState>) orderState.getOrderShipGroups()).getOrAddDefault(shipGroupSeqId),
                orderId -> {
                    orderEventService.pullOrderShipGroupTableItemAddedEvents();
                    return orderShipGroupTableItemAddedRepository.findByOrderShipGroupId_OrderId(orderId).stream()
                            .map(i -> i.getOrderShipGroupId().getShipGroupSeqId()).collect(Collectors.toList());
                },
                (orderShipGroupState, productId) -> (OrderItemShipGroupAssociationState.MutableOrderItemShipGroupAssociationState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemShipGroupAssociationState>) orderShipGroupState.getOrderItemShipGroupAssociations()).getOrAddDefault(productId),
                (orderId, orderShipGroupShipGroupSeqId) -> {
                    orderEventService.pullOrderItemShipGroupAssociationTableItemAddedEvents();
                    return orderItemShipGroupAssociationTableItemAddedRepository.findByOrderItemShipGroupAssociationId_OrderIdAndOrderItemShipGroupAssociationId_OrderShipGroupShipGroupSeqId(orderId, orderShipGroupShipGroupSeqId).stream()
                            .map(i -> i.getOrderItemShipGroupAssociationId().getProductId()).collect(Collectors.toList());
                },
                (orderItemShipGroupAssociationState, orderItemShipGroupAssocSubitemDay) -> (OrderItemShipGroupAssocSubitemState.MutableOrderItemShipGroupAssocSubitemState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<Day, OrderItemShipGroupAssocSubitemState>) orderItemShipGroupAssociationState.getSubitems()).getOrAddDefault(orderItemShipGroupAssocSubitemDay),
                (orderId, orderShipGroupShipGroupSeqId, orderItemShipGroupAssociationProductId) -> {
                    orderEventService.pullOrderItemShipGroupAssocSubitemTableItemAddedEvents();
                    return orderItemShipGroupAssocSubitemTableItemAddedRepository.findByOrderItemShipGroupAssocSubitemId_OrderIdAndOrderItemShipGroupAssocSubitemId_OrderShipGroupShipGroupSeqIdAndOrderItemShipGroupAssocSubitemId_OrderItemShipGroupAssociationProductId(orderId, orderShipGroupShipGroupSeqId, orderItemShipGroupAssociationProductId).stream()
                            .map(i -> i.getOrderItemShipGroupAssocSubitemId().getOrderItemShipGroupAssocSubitemDay()).collect(Collectors.toList());
                }
        );
    }

    @Transactional
    public void updateOrderState(String orderId) {
        OrderState orderState = aptosOrderStateRetriever.retrieveOrderState(orderId);
        if (orderState == null) {
            return;
        }
        orderStateRepository.merge(orderState);
    }

}

