// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosdemocontracts.aptos.contract.service;

import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.dddml.aptosdemocontracts.aptos.contract.AptosAccount;
import org.dddml.aptosdemocontracts.aptos.contract.ContractConstants;
import org.dddml.aptosdemocontracts.aptos.contract.repository.AptosAccountRepository;
import org.dddml.aptosdemocontracts.domain.order.*;
import org.dddml.aptosdemocontracts.aptos.contract.Order;
import org.dddml.aptosdemocontracts.aptos.contract.OrderItem;

import java.io.IOException;
import java.util.*;
import java.util.function.*;

public class AptosOrderStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, OrderState.MutableOrderState> orderStateFactory;
    private BiFunction<OrderState, String, OrderItemState.MutableOrderItemState> orderItemStateFactory;

    private OrderItemProductIdsGetter orderItemProductIdsGetter;

    public AptosOrderStateRetriever(NodeApiClient aptosNodeApiClient,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, OrderState.MutableOrderState> orderStateFactory,
                                    BiFunction<OrderState, String, OrderItemState.MutableOrderItemState> orderItemStateFactory,
                                    OrderItemProductIdsGetter orderItemProductIdsGetter
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosAccountRepository = aptosAccountRepository;
        this.orderStateFactory = orderStateFactory;
        this.orderItemStateFactory = orderItemStateFactory;
        this.orderItemProductIdsGetter = orderItemProductIdsGetter;
    }

    public OrderState retrieveOrderState(String orderId) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<Order.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    ContractConstants.ORDER_MODULE_TABLES,
                    Order.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getOrderTable().getHandle();
        Order order;
        try {
            order = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    "0x1::string::String",//todo
                    "0x2239450816c09cef0202c090ec15f648a33e3fff0209167cad1ef6830b1d5d1f::order::Order",//todo
                    orderId,
                    Order.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toOrderState(order);
    }

    private OrderState toOrderState(Order order) {
        OrderState.MutableOrderState orderState = orderStateFactory.apply(order.getOrderId());
        orderState.setVersion(order.getVersion());
        orderState.setTotalAmount(order.getTotalAmount());
        if (order.getItems() != null) {
            String orderItemTableHandle = order.getItems().getInner().getHandle();
            List<OrderItem> items = getOrderItems(orderItemTableHandle, orderItemProductIdsGetter.getOrderItemProductIds(orderState.getOrderId()));
            for (OrderItem i : items) {
                orderState.getItems().add(toOrderItemState(orderState, i));
            }
        }

        return orderState;
    }

    private OrderItemState toOrderItemState(OrderState orderState, OrderItem orderItem) {
        OrderItemState.MutableOrderItemState orderItemState = orderItemStateFactory.apply(orderState, orderItem.getProductId());
        orderItemState.setQuantity(orderItem.getQuantity());
        orderItemState.setItemAmount(orderItem.getItemAmount());
        return orderItemState;
    }

    private List<OrderItem> getOrderItems(String orderItemTableHandle, List<String> productIds) {
        List<OrderItem> orderItems = new ArrayList<>();

        for (String productId : productIds) {
            OrderItem orderItem;
            try {
                orderItem = aptosNodeApiClient.getTableItem(
                        orderItemTableHandle,
                        "0x1::string::String",//todo
                        "0x2239450816c09cef0202c090ec15f648a33e3fff0209167cad1ef6830b1d5d1f::order_item::OrderItem",//todo
                        productId,
                        OrderItem.class,
                        null
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            orderItems.add(orderItem);
        }
        return orderItems;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }


    public interface OrderItemProductIdsGetter {
        List<String> getOrderItemProductIds(String orderId);
    }
}

