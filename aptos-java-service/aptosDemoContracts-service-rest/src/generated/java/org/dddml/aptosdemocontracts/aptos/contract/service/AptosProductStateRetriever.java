// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosdemocontracts.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.dddml.aptosdemocontracts.aptos.contract.AptosAccount;
import org.dddml.aptosdemocontracts.aptos.contract.ContractConstants;
import org.dddml.aptosdemocontracts.aptos.contract.DomainBeanUtils;
import org.dddml.aptosdemocontracts.aptos.contract.repository.AptosAccountRepository;
import org.dddml.aptosdemocontracts.domain.product.*;
import org.dddml.aptosdemocontracts.domain.*;
import org.dddml.aptosdemocontracts.aptos.contract.Product;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosProductStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, ProductState.MutableProductState> productStateFactory;


    public AptosProductStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, ProductState.MutableProductState> productStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.productStateFactory = productStateFactory;
    }

    public ProductState retrieveProductState(String productId) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<Product.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.PRODUCT_MODULE_TABLES,
                    Product.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getProductTable().getHandle();
        Product product;
        try {
            product = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    ContractConstants.toNumericalAddressType(ContractConstants.PRODUCT_ID_TYPE, this.aptosContractAddress),
                    this.aptosContractAddress + "::" + ContractConstants.PRODUCT_MODULE_PRODUCT,
                    productId,
                    Product.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toProductState(product);
    }

    private ProductState toProductState(Product product) {
        ProductState.MutableProductState productState = productStateFactory.apply(product.getProductId());
        productState.setVersion(product.getVersion());
        productState.setName(product.getName());
        productState.setUnitPrice(product.getUnitPrice());
        return productState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

