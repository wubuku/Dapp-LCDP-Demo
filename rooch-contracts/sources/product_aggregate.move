// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module rooch_demo::product_aggregate {
    use moveos_std::object_id::ObjectID;
    use moveos_std::storage_context::StorageContext;
    use rooch_demo::product;
    use rooch_demo::product_create_logic;
    use rooch_demo::product_delete_logic;
    use rooch_demo::product_update_logic;
    use std::string::String;

    public entry fun create(
        storage_ctx: &mut StorageContext,
        account: &signer,
        name: String,
        unit_price: u128,
    ) {
        let product_created = product_create_logic::verify(
            storage_ctx,
            account,
            name,
            unit_price,
        );
        let product_obj = product_create_logic::mutate(
            storage_ctx,
            account,
            &product_created,
        );
        product::set_product_crud_event_id(&mut product_created, product::id(&product_obj));
        product::add_product(storage_ctx, product_obj);
        product::emit_product_created(storage_ctx, product_created);
    }

    public entry fun update(
        storage_ctx: &mut StorageContext,
        account: &signer,
        id: ObjectID,
        name: String,
        unit_price: u128,
    ) {
        let product_obj = product::remove_product(storage_ctx, id);
        let product_updated = product_update_logic::verify(
            storage_ctx,
            account,
            name,
            unit_price,
            &product_obj,
        );
        let updated_product_obj = product_update_logic::mutate(
            storage_ctx,
            account,
            &product_updated,
            product_obj,
        );
        product::update_version_and_add(storage_ctx, updated_product_obj);
        product::emit_product_updated(storage_ctx, product_updated);
    }

    public entry fun delete(
        storage_ctx: &mut StorageContext,
        account: &signer,
        id: ObjectID,
    ) {
        let product_obj = product::remove_product(storage_ctx, id);
        let product_deleted = product_delete_logic::verify(
            storage_ctx,
            account,
            &product_obj,
        );
        let updated_product_obj = product_delete_logic::mutate(
            storage_ctx,
            account,
            &product_deleted,
            product_obj,
        );
        product::drop_product(updated_product_obj);
        product::emit_product_deleted(storage_ctx, product_deleted);
    }

}
