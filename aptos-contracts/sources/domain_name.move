// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_demo::domain_name {
    use aptos_demo::genesis_account;
    use aptos_demo::pass_object;
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_std::table::{Self, Table};
    use std::string::String;
    friend aptos_demo::domain_name_register_logic;
    friend aptos_demo::domain_name_renew_logic;
    friend aptos_demo::domain_name_aggregate;

    const EID_ALREADY_EXISTS: u64 = 101;
    const EID_DATA_TOO_LONG: u64 = 102;

    struct DomainNameId has store, drop, copy {
        top_level_domain: String,
        second_level_domain: String,
    }

    public fun new_domain_name_id(
        top_level_domain: String,
        second_level_domain: String,
    ): DomainNameId {
        DomainNameId {
            top_level_domain,
            second_level_domain,
        }
    }

    public(friend) fun domain_name_id_top_level_domain(domain_name_id: &DomainNameId): String {
        domain_name_id.top_level_domain
    }

    public(friend) fun domain_name_id_second_level_domain(domain_name_id: &DomainNameId): String {
        domain_name_id.second_level_domain
    }

    struct Events has key {
        registered_handle: event::EventHandle<Registered>,
        renewed_handle: event::EventHandle<Renewed>,
    }

    struct Tables has key {
        domain_name_table: Table<DomainNameId, DomainName>,
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            registered_handle: account::new_event_handle<Registered>(&res_account),
            renewed_handle: account::new_event_handle<Renewed>(&res_account),
        });

        move_to(
            &res_account,
            Tables {
                domain_name_table: table::new(),
            },
        );

    }

    struct DomainName has store {
        domain_name_id: DomainNameId,
        version: u64,
        expiration_date: u64,
    }

    public fun domain_name_id(domain_name: &DomainName): DomainNameId {
        domain_name.domain_name_id
    }

    public fun version(domain_name: &DomainName): u64 {
        domain_name.version
    }

    public fun expiration_date(domain_name: &DomainName): u64 {
        domain_name.expiration_date
    }

    public(friend) fun set_expiration_date(domain_name: &mut DomainName, expiration_date: u64) {
        domain_name.expiration_date = expiration_date;
    }

    fun new_domain_name(
        domain_name_id: DomainNameId,
        expiration_date: u64,
    ): DomainName {
        DomainName {
            domain_name_id,
            version: 0,
            expiration_date,
        }
    }

    struct Registered has store, drop {
        domain_name_id: DomainNameId,
        registration_period: u64,
        owner: address,
    }

    public fun registered_domain_name_id(registered: &Registered): DomainNameId {
        registered.domain_name_id
    }

    public fun registered_registration_period(registered: &Registered): u64 {
        registered.registration_period
    }

    public fun registered_owner(registered: &Registered): address {
        registered.owner
    }

    public(friend) fun new_registered(
        domain_name_id: DomainNameId,
        registration_period: u64,
        owner: address,
    ): Registered {
        Registered {
            domain_name_id,
            registration_period,
            owner,
        }
    }

    struct Renewed has store, drop {
        domain_name_id: DomainNameId,
        version: u64,
        renew_period: u64,
        account: address,
    }

    public fun renewed_domain_name_id(renewed: &Renewed): DomainNameId {
        renewed.domain_name_id
    }

    public fun renewed_renew_period(renewed: &Renewed): u64 {
        renewed.renew_period
    }

    public fun renewed_account(renewed: &Renewed): address {
        renewed.account
    }

    public(friend) fun new_renewed(
        domain_name: &DomainName,
        renew_period: u64,
        account: address,
    ): Renewed {
        Renewed {
            domain_name_id: domain_name_id(domain_name),
            version: version(domain_name),
            renew_period,
            account,
        }
    }


    public(friend) fun create_domain_name(
        domain_name_id: DomainNameId,
        expiration_date: u64,
    ): DomainName acquires Tables {
        asset_domain_name_not_exists(domain_name_id);
        let domain_name = new_domain_name(
            domain_name_id,
            expiration_date,
        );
        domain_name
    }

    public(friend) fun asset_domain_name_not_exists(
        domain_name_id: DomainNameId,
    ) acquires Tables {
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        assert!(!table::contains(&tables.domain_name_table, domain_name_id), EID_ALREADY_EXISTS);
    }

    public(friend) fun update_version_and_add(domain_name: DomainName) acquires Tables {
        domain_name.version = domain_name.version + 1;
        add_domain_name(domain_name);
    }

    public(friend) fun remove_domain_name(domain_name_id: DomainNameId): DomainName acquires Tables {
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::remove(&mut tables.domain_name_table, domain_name_id)
    }

    public(friend) fun add_domain_name(domain_name: DomainName) acquires Tables {
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::add(&mut tables.domain_name_table, domain_name_id(&domain_name), domain_name);
    }

    public fun get_domain_name(domain_name_id: DomainNameId): pass_object::PassObject<DomainName> acquires Tables {
        let domain_name = remove_domain_name(domain_name_id);
        pass_object::new(domain_name)
    }

    public fun return_domain_name(domain_name_pass_obj: pass_object::PassObject<DomainName>) acquires Tables {
        let domain_name = pass_object::extract(domain_name_pass_obj);
        add_domain_name(domain_name);
    }

    public(friend) fun emit_registered(registered: Registered) acquires Events {
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.registered_handle, registered);
    }

    public(friend) fun emit_renewed(renewed: Renewed) acquires Events {
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.renewed_handle, renewed);
    }

}
